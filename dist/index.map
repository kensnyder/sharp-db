{"version":3,"sources":["Db/Db.js","Parser/Parser.js","Select/Select.js","entry.js"],"names":["instances","Db","constructor","config","mocks","env","process","host","hostname","DB_HOSTNAME","user","username","DB_USERNAME","password","DB_PASSWORD","database","DB_DATABASE","port","DB_PORT","encoding","DB_ENCODING","push","factory","instance","connect","connection","mysql","createConnection","err","fatal","Error","code","sqlMessage","connectOnce","end","Promise","resolve","reject","destroy","endAll","all","map","db","destroyAll","forEach","select","sql","bindVars","options","bindArgs","lastQuery","query","error","results","fields","lastFields","selectHash","key","name","val","hash","result","selectList","list","selectGrouped","groupField","selectIndexed","indexField","selectFirst","selectValue","selectExists","then","Boolean","insert","insertId","update","changedRows","delete","selectFrom","table","criteria","extra","Array","isArray","escFields","field","quote","escFieldsString","length","join","escTable","escWhere","buildWheres","trim","selectId","id","selectByKey","selectUuid","uuid","column","value","escColumn","selectOrCreate","newValues","insertInto","values","escape","fieldsSql","valuesSql","insertSql","insertIntoOnDuplicateKeyUpdate","sets","setSql","lastInsertId","affected","affectedRows","updateTable","set","where","deleteFrom","limit","wheres","clauses","hasOwnProperty","buildWhere","operator","split","toUpperCase","val0","val1","escVal","args","arg","replace","$0","$1","escapeQuoteless","slice","identifier","test","quoted","escapeId","tpl","toSql","templateData","variables","s","variable","i","supported","functions","mock","when","data","cb","RegExp","Parser","_stripComments","_extractSubqueries","subqueries","extractor","placeholder","_injectSubqueries","replacer","mapper","clause","_columns","_joins","_wheres","_havings","_split","splitter","parse","rawSql","stripped","expressions","rawKeyword","keyword","handler","_handleSelect","columns","buffer","optionRegex","match","option","indexOf","_handleFrom","tables","_handleJoin","innerJoin","_handleInnerJoin","_handleLeftJoin","leftJoin","_handleLeftOuterJoin","leftOuterJoin","_handleRightJoin","rightJoin","_handleRightOuterJoin","rightOuterJoin","_handleCrossJoin","crossJoin","_handleFullJoin","fullJoin","_handleFullOuterJoin","fullOuterJoin","_handleWhere","_handleConditions","_handleHaving","type","andGroups","andGroup","orPieces","fn","orFn","_handleGroupBy","groupBy","_handleOrderBy","orderBy","_handleLimit","_handleOffset","offset","Select","reset","parser","init","toString","lines","_options","_tables","_groupBys","_orderBys","_page","_limit","_offset","filter","normalized","prop","_hasOne","_belongsTo","_hasMany","_habtm","_bound","hasOne","thisProperty","thatTableAndColumn","belongsTo","hasMany","habtm","idsColumn","matchJoinFirst","matchJoinSecond","_","joinTable","throughTable","foreignColumn","hasAndBelongsToMany","bind","unbind","p","undefined","fetch","records","_spliceHasOnes","_spliceBelongsTos","_spliceHasManys","_spliceHabtms","fetchFirst","fetchHash","fetchValue","fetchIndexed","byField","rs","indexed","r","fetchGrouped","grouped","getClone","copy","getFoundRowsQuery","countExpr","clone","subquery","getFoundRowsSql","normalize","subquerySql","foundRows","spec","thisColumn","ids","thisPropery","columnNames","columnName","optionExpression","tableName","from","expression","unjoin","t","regex","_conditions","collection","numArgs","$2","escNoQuotes","parts","shift","toLocaleUpperCase","likeMatch","to","quoteless","inVals","v","joined","whereBetween","twoValueArray","orWhere","conditions","condition","having","orHaving","sortField","mapNames","direction","num","Number","page","escaped"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["import forOwn from 'lodash.forown';\nimport mysql from 'mysql';\n\n/**\n * A list of all the Db Instances that have been created\n * @type {Array}\n */\nconst instances = [];\n\n/**\n * Simple database class for mysql\n */\nexport class Db {\n\t/**\n\t * Connection options including host, login, password, encoding, database\n\t * @param {Object} config  Configuration object\n\t */\n\tconstructor(config = {}) {\n\t\tthis.mocks = [];\n\t\tconst env =\n\t\t\ttypeof process === 'object' && typeof process.env === 'object'\n\t\t\t\t? process.env\n\t\t\t\t: {};\n\t\tthis.config = {\n\t\t\thost: config.hostname || env.DB_HOSTNAME || '127.0.0.1',\n\t\t\tuser: config.username || env.DB_USERNAME || 'root',\n\t\t\tpassword: config.password || env.DB_PASSWORD || '',\n\t\t\tdatabase: config.database || env.DB_DATABASE || 'platform',\n\t\t\tport: config.port || env.DB_PORT || 3306,\n\t\t\tencoding: config.encoding || env.DB_ENCODING || 'utf-8',\n\t\t};\n\t\tinstances.push(this);\n\t}\n\n\t/**\n\t * Create a new QuickDb instance or return the last used one\n\t * @param {Object} [config]  In the format required by mysql js\n\t * @return {Db}\n\t */\n\tstatic factory(config = {}) {\n\t\tif (!Db.instance) {\n\t\t\tDb.instance = new Db(config);\n\t\t}\n\t\treturn Db.instance;\n\t}\n\n\t/**\n\t * Make a new connection to MySQL\n\t */\n\tconnect() {\n\t\tthis.connection = mysql.createConnection(this.config);\n\t\tthis.connection.connect(err => {\n\t\t\tif (err && err.fatal) {\n\t\t\t\tthrow new Error(`[${err.code}] ${err.sqlMessage}`);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Make a new connection to MySQL if not already connected\n\t */\n\tconnectOnce() {\n\t\tif (!this.connection) {\n\t\t\tthis.connect();\n\t\t}\n\t}\n\n\t/**\n\t * Close this connection to the database\n\t * @return {Promise}  Resolves when connection has been closed\n\t */\n\tend() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (this.connection && this.connection.end) {\n\t\t\t\tthis.connection.end(err => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Destroy the connection to the database\n\t * @return {Db}\n\t */\n\tdestroy() {\n\t\tif (this.connection && this.connection.destroy) {\n\t\t\tthis.connection.destroy();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Close all connections to the database\n\t * @return {Promise}  Resolves when all connections have been closed\n\t */\n\tstatic endAll() {\n\t\treturn Promise.all(instances.map(db => db.end()));\n\t}\n\n\t/**\n\t * Destroy all connections to the database\n\t * @return {Db}\n\t */\n\tstatic destroyAll() {\n\t\tinstances.forEach(db => db.destroy());\n\t\treturn Db;\n\t}\n\n\t// /**\n\t//  * Run a list of semicolon-delimited queries\n\t//  * @see https://www.npmjs.com/package/mysql#multiple-statement-queries\n\t//  * @param {String} sql\n\t//  * @param int|string $bindVar1  The value to bind to the first question mark\n\t//  * @param int|string $bindVarN  The value to bind to the nth question mark\n\t//  * @return {Array}|bool\n\t//  */\n\t// multiQuery(/*$sql, $bindVar1, $bindVarN*/) {\n\t// \tif (!$this->_connectOnce()) {\n\t// \t\treturn false;\n\t// \t}\n\t// \t$sql = $this->bindArgs(func_get_args());\n\t// \t$ok = mysqli_multi_query($this->_dbh, $sql);\n\t// \tif (!$ok) {\n\t// \t\treturn false;\n\t// \t}\n\t// \t$fetch = \"mysqli_fetch_$this->fetchMode\";\n\t// \t$resultSets = [];\n\t// \twhile(1) {\n\t// \t\t/* get first result set */\n\t// \t\t$resultSet = [];\n\t// \t\tif (($result = mysqli_store_result($this->_dbh))) {\n\t// \t\t\twhile (($row = $fetch($result))) {\n\t// \t\t\t\t$resultSet[] = $row;\n\t// \t\t\t}\n\t// \t\t\tmysqli_free_result($result);\n\t// \t\t}\n\t// \t\t$resultSets[] = $resultSet;\n\t// \t\tif (!mysqli_next_result($this->_dbh)) {\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t}\n\t// \treturn $resultSets;\n\t// }\n\n\t/**\n\t * Return result rows for the given SELECT statement\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Object[]>}\n\t */\n\tselect(sql, ...bindVars) {\n\t\tthis.connectOnce();\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastQuery = this.connection.query(\n\t\t\t\toptions,\n\t\t\t\t(error, results, fields) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.lastFields = fields;\n\t\t\t\t\t\tresolve(results);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Return result array as col1 => col2 pairs for the given SELECT statement\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Object>}\n\t */\n\tselectHash(sql, ...bindVars) {\n\t\tthis.connectOnce();\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastQuery = this.connection.query(\n\t\t\t\toptions,\n\t\t\t\tbindVars,\n\t\t\t\t(error, results, fields) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.lastFields = fields;\n\t\t\t\t\t\tconst key = fields[0].name;\n\t\t\t\t\t\tconst val = fields[1].name;\n\t\t\t\t\t\tconst hash = {};\n\t\t\t\t\t\tresults.forEach(result => {\n\t\t\t\t\t\t\thash[result[key]] = result[val];\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresolve(hash);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Return result array as col1 => col2 pairs for the given SELECT statement\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Object>}\n\t */\n\tselectList(sql, ...bindVars) {\n\t\tthis.connectOnce();\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastQuery = this.connection.query(\n\t\t\t\toptions,\n\t\t\t\t(error, results, fields) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.lastFields = fields;\n\t\t\t\t\t\tconst name = fields[0].name;\n\t\t\t\t\t\tconst list = [];\n\t\t\t\t\t\tresults.forEach(result => list.push(result[name]));\n\t\t\t\t\t\tresolve(list);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Return records all grouped by one of the column's values\n\t * @param {String} groupField  The name of the field to group by\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Array>}\n\t */\n\tselectGrouped(groupField, sql, ...bindVars) {\n\t\tthis.connectOnce();\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastQuery = this.connection.query(\n\t\t\t\toptions,\n\t\t\t\t(error, results, fields) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.lastFields = fields;\n\t\t\t\t\t\tconst hash = {};\n\t\t\t\t\t\tresults.forEach(result => {\n\t\t\t\t\t\t\tif (!hash[result[groupField]]) {\n\t\t\t\t\t\t\t\thash[result[groupField]] = [];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thash[result[groupField]].push(result);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresolve(hash);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Return records all indexed by one of the column's values\n\t * @param {String} indexField  The name of the field to index by\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Array>}\n\t */\n\tselectIndexed(indexField, sql, ...bindVars) {\n\t\tthis.connectOnce();\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastQuery = this.connection.query(\n\t\t\t\toptions,\n\t\t\t\t(error, results, fields) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.lastFields = fields;\n\t\t\t\t\t\tconst hash = {};\n\t\t\t\t\t\tresults.forEach(result => {\n\t\t\t\t\t\t\thash[result[indexField]] = result;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresolve(hash);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Return first result row for the given SELECT statement\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Object>}\n\t */\n\tselectFirst(sql, ...bindVars) {\n\t\tthis.connectOnce();\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastQuery = this.connection.query(\n\t\t\t\toptions,\n\t\t\t\t(error, results, fields) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.lastFields = fields;\n\t\t\t\t\t\tresolve(results[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Return first column value for the first result row for the given SELECT statement\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Number|String>}\n\t */\n\tselectValue(sql, ...bindVars) {\n\t\tthis.connectOnce();\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastQuery = this.connection.query(\n\t\t\t\toptions,\n\t\t\t\t(error, results, fields) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.lastFields = fields;\n\t\t\t\t\t\tconst name = fields[0].name;\n\t\t\t\t\t\tresolve(results[0][name]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Run the given SELECT statement wrapped in a SELECT EXISTS query\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Boolean>}  True if it exists, false otherwise\n\t */\n\tselectExists(sql, ...bindVars) {\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\toptions.sql = `SELECT EXISTS (${options.sql}) AS does_it_exist`;\n\t\treturn this.selectValue(options).then(Boolean, err => err);\n\t}\n\n\t/**\n\t * Run the given INSERT statement\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Number>}  The id of the last inserted record\n\t */\n\tinsert(sql, ...bindVars) {\n\t\tthis.connectOnce();\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastQuery = this.connection.query(options, (error, results) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(results.insertId);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Run the given UPDATE statement\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Number>}  The number of rows affected by the statement\n\t */\n\tupdate(sql, ...bindVars) {\n\t\tthis.connectOnce();\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastQuery = this.connection.query(options, (error, results) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(results.changedRows);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Run the given DELETE statement\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Array>}\n\t */\n\tdelete(sql, ...bindVars) {\n\t\treturn this.update(sql, ...bindVars);\n\t}\n\n\t/**\n\t * Build a SELECT statement and return result rows\n\t * @param {String} table  The name of the table\n\t * @param {Array} fields  An array of field names to select\n\t * @param {Object} criteria  Params to construct the WHERE clause\n\t * @param {String} extra  Additional raw SQL such as GROUP BY, ORDER BY, or LIMIT\n\t * @return {Promise<Array>}  The result rows\n\t */\n\tselectFrom(table, fields = [], criteria = {}, extra = '') {\n\t\tif (!Array.isArray(fields)) {\n\t\t\tthrow new Error('Db.selectFrom fields must be an array');\n\t\t}\n\t\tif (typeof criteria !== 'object') {\n\t\t\tthrow new Error('Db.selectFrom criteria must be an array');\n\t\t}\n\t\tthis.connectOnce();\n\t\tconst escFields = fields.map(field => this.quote(field));\n\t\tconst escFieldsString = fields.length ? escFields.join(', ') : '*';\n\t\tconst escTable = this.quote(table);\n\t\tconst escWhere = this.buildWheres(criteria) || '1';\n\t\tconst sql = `SELECT ${escFieldsString} FROM ${escTable} WHERE ${escWhere} ${extra}`.trim();\n\t\treturn this.select(sql);\n\t}\n\n\t/**\n\t * Select the record with the given id\n\t * @param {String} table  The name of the table from which to select\n\t * @param {String} id  The value of the id column\n\t * @return {Promise<Number>}\n\t */\n\tselectId(table, id) {\n\t\treturn this.selectByKey(table, 'id', id);\n\t}\n\n\t/**\n\t * Select the record with the given UUID\n\t * @param {String} table  The name of the table from which to select\n\t * @param {String} uuid  The value of the uuid column\n\t * @return {Promise<String>}\n\t */\n\tselectUuid(table, uuid) {\n\t\treturn this.selectByKey(table, 'uuid', uuid);\n\t}\n\n\t/**\n\t * Select the record with the given UUID\n\t * @param {String} table  The name of the table from which to select\n\t * @param {String} column  The name of the column from which to select\n\t * @param {String} value  The value of the record for that column\n\t * @return {Promise<Object>}\n\t */\n\tselectByKey(table, column, value) {\n\t\tconst escTable = this.quote(table);\n\t\tconst escColumn = this.quote(column);\n\t\treturn this.selectFirst(\n\t\t\t`SELECT * FROM ${escTable} WHERE ${escColumn} = ?`,\n\t\t\tvalue\n\t\t);\n\t}\n\n\t/**\n\t * Find a record or add a new one\n\t * @param {String} table  The name of the table from which to select\n\t * @param {Object} criteria  Criteria by which to find the row\n\t * @param {Object} newValues  The values to use to insert if the record doesn't exist\n\t * @return {Promise<Number>}  The existing id or the new id\n\t */\n\tselectOrCreate(table, criteria, newValues = {}) {\n\t\treturn this.selectFrom(table, [], criteria).then(\n\t\t\tresults => {\n\t\t\t\tif (results.length > 0) {\n\t\t\t\t\treturn results[0];\n\t\t\t\t} else {\n\t\t\t\t\treturn this.insertInto(table, newValues);\n\t\t\t\t}\n\t\t\t},\n\t\t\terr => err\n\t\t);\n\t}\n\n\t/**\n\t * Build an INSERT statement and run it\n\t * @param {String} table  The name of the table\n\t * @param {Object} insert  column-value pairs to insert\n\t * @return {Promise<Number>}  Id of the last inserted record\n\t */\n\tinsertInto(table, insert) {\n\t\t// build insert expression\n\t\tconst fields = [];\n\t\tconst values = [];\n\t\tforOwn(insert, (value, field) => {\n\t\t\tfields.push(this.quote(field));\n\t\t\tvalues.push(mysql.escape(value));\n\t\t});\n\t\tif (fields.length === 0) {\n\t\t\tthrow new Error(\n\t\t\t\t'Db.insertIntoOnDuplicateKeyUpdate requires a non-empty insert Object'\n\t\t\t);\n\t\t}\n\t\tconst escTable = this.quote(table);\n\t\tconst fieldsSql = fields.join(',');\n\t\tconst valuesSql = values.join(',');\n\t\tconst insertSql = `INSERT INTO ${escTable} (${fieldsSql}) VALUES (${valuesSql})`;\n\t\treturn this.insert(insertSql);\n\t}\n\n\t/**\n\t * Run an \"INSERT INTO ... ON DUPLICATE KEY UPDATE\" query where\n\t * if a key conflicts, update the given fields\n\t * @param {String} table  The name of the table\n\t * @param {Object} insert  An array with column => value pairs for insertion\n\t * @param {Object} update  An array with column => value pairs for update\n\t * @return {Promise<Object>} result\n\t * @property {Number} result.lastInsertId  The id of the last inserted or updated record\n\t * @property {Number} result.affected  The number of rows updated (if any)\n\t */\n\tinsertIntoOnDuplicateKeyUpdate(table, insert, update) {\n\t\tthis.connectOnce();\n\t\t// build insert expression\n\t\tconst fields = [];\n\t\tconst values = [];\n\t\tforOwn(insert, (value, field) => {\n\t\t\tfields.push(this.quote(field));\n\t\t\tvalues.push(mysql.escape(value));\n\t\t});\n\t\tif (fields.length === 0) {\n\t\t\tthrow new Error(\n\t\t\t\t'Db.insertIntoOnDuplicateKeyUpdate requires a non-empty insert Object'\n\t\t\t);\n\t\t}\n\t\ttable = this.quote(table);\n\t\tconst fieldsSql = fields.join(',');\n\t\tconst valuesSql = values.join(',');\n\t\tconst insertSql = `INSERT INTO ${table} (${fieldsSql}) VALUES (${valuesSql})`;\n\t\t// build update expression\n\t\tconst sets = [];\n\t\tforOwn(update, (value, field) => {\n\t\t\tsets.push(this.quote(field) + '=' + mysql.escape(value));\n\t\t});\n\t\tif (sets.length === 0) {\n\t\t\tthrow new Error(\n\t\t\t\t'Db.insertIntoOnDuplicateKeyUpdate requires a non-empty update Object'\n\t\t\t);\n\t\t}\n\t\tconst setSql = sets.join(',');\n\t\t// combine\n\t\tconst sql = `${insertSql} ON DUPLICATE KEY UPDATE ${setSql}`;\n\t\t// run\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastQuery = this.connection.query(sql, values, (error, results) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tlastInsertId: results.insertId,\n\t\t\t\t\t\taffected: results.affectedRows,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Build an UPDATE statement and run it\n\t * @param {String} table  The name of the table\n\t * @param {Object} set  An array of column => value pairs to update\n\t * @param {Object} where  Params to construct the WHERE clause\n\t * @return {Promise<Number>}  Number of rows affected\n\t */\n\tupdateTable(table, set, where = {}) {\n\t\tthis.connectOnce();\n\t\tconst escTable = this.quote(table);\n\t\tconst escWhere = this.buildWheres(where);\n\t\tconst sql = `UPDATE ${escTable} SET ? WHERE ${escWhere}`;\n\t\treturn this.select(sql, set);\n\t}\n\n\t/**\n\t * Construct a delete query and run\n\t * @param {String} table  The name of the table from which to delete\n\t * @param {Object} where  WHERE conditions on which to delete\n\t * @param {Number} limit  Limit deletion to this many records\n\t * @return {Promise<Number>}  Number of affected rows\n\t */\n\tdeleteFrom(table, where, limit = null) {\n\t\tthis.connectOnce();\n\t\tconst escTable = this.quote(table);\n\t\tconst escWhere = this.buildWheres(where);\n\t\tlet sql = `DELETE FROM ${escTable} WHERE ${escWhere}`;\n\t\tif (limit > 0) {\n\t\t\tsql = `${sql}LIMIT ${limit}`;\n\t\t}\n\t\treturn this.delete(sql);\n\t}\n\n\t/**\n\t * Build a where clause from an object of field-value pairs\n\t * @param {Object} wheres  An object with field-value pairs (field may be field space operator)\n\t * @return {String}\n\t */\n\tbuildWheres(wheres) {\n\t\tconst clauses = [];\n\t\tfor (const field in wheres) {\n\t\t\tif (!wheres.hasOwnProperty(field)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tclauses.push(this.buildWhere(field, wheres[field]));\n\t\t}\n\t\treturn clauses.length ? clauses.join(' AND ') : '1';\n\t}\n\n\t/**\n\t * Construct where clause element from the given field and value\n\t * @param {String} field  The field or field space operator\n\t * @param {*} value  The value to bind\n\t * @return {String}\n\t * @example\n\t * db.buildWhere('start_date BETWEEN', array('2012-01-01','2013-01-01'));\n\t * db.buildWhere('start_date >', '2013-01-01');\n\t * db.buildWhere('start_date !=', '2013-01-01');\n\t * db.buildWhere('start_date', null); // `start_date` IS NULL\n\t * db.buildWhere('start_date !=', null); // `start_date` IS NOT NULL\n\t * db.buildWhere('id', array(1,2,3)); // id IN (1,2,3)\n\t * db.buildWhere('id !=', array(1,2,3)); // id NOT IN (1,2,3)\n\t */\n\tbuildWhere(field, value) {\n\t\tlet [name, operator] = field.split(' ');\n\t\tname = this.quote(name);\n\t\toperator = operator ? operator.toUpperCase() : '=';\n\t\tif (operator === 'BETWEEN') {\n\t\t\tconst val0 = mysql.escape(value[0]);\n\t\t\tconst val1 = mysql.escape(value[1]);\n\t\t\treturn `${name} BETWEEN ${val0} AND ${val1}`;\n\t\t} else if (value === null) {\n\t\t\treturn operator === '=' ? `${name} IS NULL` : `${name} IS NOT NULL`;\n\t\t} else if (Array.isArray(value)) {\n\t\t\tconst values = value.map(val => mysql.escape(val));\n\t\t\treturn operator === '=' || operator === 'IN'\n\t\t\t\t? `${name} IN(${values})`\n\t\t\t\t: `${name} NOT IN(${values})`;\n\t\t}\n\t\tconst escVal = mysql.escape(value);\n\t\treturn `${name} ${operator} ${escVal}`;\n\t}\n\n\t/**\n\t * Bind an array of arguments to a query\n\t * @param {String} sql  The base SQL query\n\t * @param {Array} args  An array of values to bind\n\t * @return {String}\n\t * @example\n\t * db.select('SELECT * FROM users WHERE id = ?', 100);\n\t * db.bindArgs(array('SELECT * FROM users WHERE id = ?', 100)); // SELECT * FROM users WHERE id = '100'\n\t * db.select('SELECT * FROM users WHERE id = :id', array('id'=>100));\n\t * db.bindArgs(array('SELECT * FROM users WHERE id = :id', array('id'=>100))); // SELECT * FROM users WHERE id = '100'\n\t */\n\tbindArgs(sql, args) {\n\t\tconst options = typeof sql == 'object' ? sql : { sql };\n\t\tif (typeof options.sql !== 'string') {\n\t\t\toptions.sql = '';\n\t\t}\n\t\tif (!Array.isArray(args)) {\n\t\t\treturn options;\n\t\t}\n\t\targs.forEach(arg => {\n\t\t\tif (arg && typeof arg === 'object' && !Array.isArray(arg)) {\n\t\t\t\toptions.sql = options.sql.replace(/:([\\w_]+)/g, ($0, $1) => {\n\t\t\t\t\tif (arg.hasOwnProperty($1)) {\n\t\t\t\t\t\treturn mysql.escape(arg[$1]);\n\t\t\t\t\t}\n\t\t\t\t\treturn $0;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\toptions.sql = options.sql.replace('?', mysql.escape(arg));\n\t\t\t}\n\t\t});\n\t\treturn options;\n\t}\n\n\t/**\n\t * Escape a value for use in a raw query and surround with apostrophes\n\t * @param {*} value  The value to escape\n\t * @return {String}\n\t */\n\tescape(value) {\n\t\treturn mysql.escape(value);\n\t}\n\n\t/**\n\t * Escape a value for use in a raw query without apostrophes\n\t * @param {*} value  The value to escape\n\t * @return {String}\n\t */\n\tescapeQuoteless(value) {\n\t\treturn mysql.escape(value).slice(1, -1);\n\t}\n\n\t/**\n\t * Escape an identifier such as a table or column\n\t * @param identifier\n\t * @return {*}\n\t */\n\tquote(identifier) {\n\t\tif (identifier === '*') {\n\t\t\treturn identifier;\n\t\t}\n\t\tif (/[`()]/.test(identifier)) {\n\t\t\treturn identifier;\n\t\t}\n\t\tlet quoted = mysql.escapeId(identifier);\n\t\tif (/\\.`\\*`$/.test(quoted)) {\n\t\t\tquoted.slice(0, -3) + '*';\n\t\t}\n\t\treturn quoted;\n\t}\n\n\t/**\n\t * Return an object with query methods to run on template literals\n\t * (backticked strings) where interpolated strings are automatically escaped\n\t * @example\n\t * const query = db.tpl();\n\t * const users = await query.select`SELECT * FROM users WHERE id IN(${userIds})`;\n\t * const count = await query.selectValue`SELECT COUNT(*) FROM users WHERE is_active = ${isActive}`;\n\t * @return {Object}  Object with query methods\n\t * @property {Function} select  Same as Db#select()\n\t * @property {Function} selectFirst  Same as Db#selectFirst()\n\t * @property {Function} selectList  Same as Db#selectList()\n\t * @property {Function} selectHash  Same as Db#selectHash()\n\t * @property {Function} selectValue  Same as Db#selectValue()\n\t * @property {Function} insert  Same as Db#insert()\n\t * @property {Function} update  Same as Db#update()\n\t * @property {Function} delete  Same as Db#delete()\n\t */\n\ttpl() {\n\t\tfunction toSql(templateData, variables) {\n\t\t\tlet s = templateData[0];\n\t\t\tvariables.forEach((variable, i) => {\n\t\t\t\ts += mysql.escape(variable);\n\t\t\t\ts += templateData[i + 1];\n\t\t\t});\n\t\t\treturn s;\n\t\t}\n\t\tconst supported = [\n\t\t\t'select',\n\t\t\t'selectFirst',\n\t\t\t'selectList',\n\t\t\t'selectHash',\n\t\t\t'selectValue',\n\t\t\t'insert',\n\t\t\t'update',\n\t\t\t'delete',\n\t\t];\n\t\tconst functions = {};\n\t\tsupported.forEach(name => {\n\t\t\tfunctions[name] = (templateData, ...variables) => {\n\t\t\t\treturn this[name](toSql(templateData, variables));\n\t\t\t};\n\t\t});\n\t\treturn functions;\n\t}\n\n\t/**\n\t * Instruct Db to return the given data when the query matches the given\n\t * pattern\n\t * @param {String|RegExp|Function} when  The pattern to match\n\t * @param {*} data  The data to return\n\t * @return {Db}\n\t */\n\tmock(when, data) {\n\t\tif (this.mocks.length === 0) {\n\t\t\tthis.connection = {\n\t\t\t\tconnect: function() {},\n\t\t\t\tquery: function(options, values, cb) {\n\t\t\t\t\tfor (mock of this.mocks) {\n\t\t\t\t\t\tconst { when, data } = mock;\n\t\t\t\t\t\tif (typeof when === 'string') {\n\t\t\t\t\t\t\tif (options.sql === when) {\n\t\t\t\t\t\t\t\tcb(data);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (when instanceof RegExp) {\n\t\t\t\t\t\t\tif (when.test(options.sql)) {\n\t\t\t\t\t\t\t\tcb(data);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (typeof when === 'function') {\n\t\t\t\t\t\t\tif (when(options.sql)) {\n\t\t\t\t\t\t\t\tcb(data);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcb(data);\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\tthis.mocks.push({ when, data });\n\t\treturn this;\n\t}\n}\n","import capitalize from 'lodash.capitalize';\nimport camelCase from 'lodash.camelcase';\nimport upperFirst from 'lodash.upperfirst';\nimport trim from 'lodash.trim';\n\n/**\n * Parse SQL and populate onto a Select query object\n */\nexport class Parser {\n\t/**\n\t * Create a new instance\n\t * @param {Select} query  A Select object on which to build parsed conditions\n\t */\n\tconstructor(query) {\n\t\tthis.query = query;\n\t}\n\n\t/**\n\t * Strip single-line and multi-line comment blocks\n\t * @param {String} sql  The SQL string\n\t * @return {String}\n\t */\n\t_stripComments(sql) {\n\t\t// multiline comments\n\t\tsql = sql.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\n\t\t// single line comments -- dashes\n\t\tsql = sql.replace(/--([\\r\\n]|\\s+[^\\r\\n]+[\\r\\n])/g, '');\n\t\t// single line comments #hashes\n\t\tsql = sql.replace(/#[^\\r\\n]+[\\r\\n]/g, '');\n\t\treturn sql;\n\t}\n\n\t/**\n\t * Before splitting into SQL clauses, extract some regex-able subqueries\n\t * @param {String} sql  The unparsed sql string\n\t * @return {Object}  An array with new sql and subqueries\n\t */\n\t_extractSubqueries(sql) {\n\t\tconst subqueries = {};\n\t\tlet i = 0;\n\t\tconst extractor = $0 => {\n\t\t\tconst placeholder = `~~SUBQUERY_${i++}~~`;\n\t\t\tsubqueries[placeholder] = $0;\n\t\t\treturn placeholder;\n\t\t};\n\t\t// subselect in FROM clause\n\t\tsql = sql.replace(/\\(\\s*SELECT\\s+.+\\)\\s+AS\\s+[^\\s,]+/, extractor);\n\t\t// IF() in FROM clause\n\t\tsql = sql.replace(/\\bIF\\s*\\(.+\\)\\s+AS\\s+[^\\s,]+/, extractor);\n\t\t// IN (SELECT *) in JOINs, WHERE or HAVING\n\t\tsql = sql.replace(/\\bIN\\s*\\(SELECT\\s.+?\\)/, extractor);\n\t\treturn { sql, subqueries };\n\t}\n\n\t/**\n\t * Inject column subqueries back into this object\n\t * @param {Object} subqueries  The lookup of extracted subqueries\n\t */\n\t_injectSubqueries(subqueries) {\n\t\tconst replacer = $0 => {\n\t\t\treturn subqueries[$0] || $0;\n\t\t};\n\t\tconst mapper = clause => {\n\t\t\treturn clause.replace(/~~SUBQUERY_\\d+~~/g, replacer);\n\t\t};\n\t\tthis.query._columns = this.query._columns.map(replacer);\n\t\tthis.query._joins = this.query._joins.map(mapper);\n\t\tthis.query._wheres = this.query._wheres.map(mapper);\n\t\tthis.query._havings = this.query._havings.map(mapper);\n\t}\n\n\t/**\n\t * Split SQL into clauses (used by ::parse())\n\t * @param {String} sql  The SQL to split\n\t * @return {String[]}\n\t */\n\t_split(sql) {\n\t\tconst splitter = /\\b(SELECT|FROM|(?:INNER |LEFT OUTER |RIGHT OUTER |LEFT |RIGHT |CROSS |FULL |FULL OUTER )JOIN|WHERE|GROUP BY|HAVING|ORDER BY|LIMIT|OFFSET)\\b/i;\n\t\treturn sql.split(splitter);\n\t}\n\n\t/**\n\t * Get a QuickSelect object representing the given SQL SELECT statement\n\t * @param {String} rawSql  The raw SQL for the SELECT statement\n\t * @return {Boolean}\n\t */\n\tparse(rawSql) {\n\t\tconst stripped = this._stripComments(rawSql);\n\t\tconst { sql, subqueries } = this._extractSubqueries(stripped);\n\t\tconst expressions = this._split(sql);\n\t\tlet i = 1;\n\t\twhile (i < expressions.length) {\n\t\t\tconst rawKeyword = expressions[i++].trim();\n\t\t\tconst keyword = upperFirst(camelCase(rawKeyword));\n\t\t\tconst clause = expressions[i++].trim();\n\t\t\tconst handler = `_handle${keyword}`;\n\t\t\tthis[handler](clause);\n\t\t}\n\t\tthis._injectSubqueries(subqueries);\n\t\treturn true;\n\t}\n\n\t_handleSelect(clause) {\n\t\tlet columns = clause.split(/s*,s*/);\n\t\t// now handle parenthesis expressions that contain commas\n\t\tlet buffer = '';\n\t\tcolumns.forEach((column, i) => {\n\t\t\tif (i === 0) {\n\t\t\t\tconst optionRegex = /^(SQL_CALC_FOUND_ROWS)\\s+/i;\n\t\t\t\tconst match = column.match(optionRegex);\n\t\t\t\tif (match) {\n\t\t\t\t\tthis.query.option(match[1]);\n\t\t\t\t\tcolumn = column.replace(optionRegex, '');\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (buffer.length) {\n\t\t\t\t// we are in the middle of an expression containing parenthesis\n\t\t\t\tbuffer += column + ',';\n\t\t\t\tif (column.indexOf(')') > 0) {\n\t\t\t\t\t// we have an end parenthesis\n\t\t\t\t\tbuffer = '';\n\t\t\t\t}\n\t\t\t} else if (column.match(/\\([^)]+$/)) {\n\t\t\t\tbuffer = column + ',';\n\t\t\t} else {\n\t\t\t\tthis.query.column(column.trim());\n\t\t\t}\n\t\t});\n\t}\n\n\t_handleFrom(clause) {\n\t\tconst tables = clause.split(/\\s*,\\s*/);\n\t\ttables.forEach(table => this.query.table(table));\n\t}\n\n\t_handleJoin(clause) {\n\t\tthis.query.innerJoin(clause);\n\t}\n\n\t_handleInnerJoin(clause) {\n\t\tthis.query.innerJoin(clause);\n\t}\n\n\t_handleLeftJoin(clause) {\n\t\tthis.query.leftJoin(clause);\n\t}\n\n\t_handleLeftOuterJoin(clause) {\n\t\tthis.query.leftOuterJoin(clause);\n\t}\n\n\t_handleRightJoin(clause) {\n\t\tthis.query.rightJoin(clause);\n\t}\n\n\t_handleRightOuterJoin(clause) {\n\t\tthis.query.rightOuterJoin(clause);\n\t}\n\n\t_handleCrossJoin(clause) {\n\t\tthis.query.crossJoin(clause);\n\t}\n\n\t_handleFullJoin(clause) {\n\t\tthis.query.fullJoin(clause);\n\t}\n\n\t_handleFullOuterJoin(clause) {\n\t\tthis.query.fullOuterJoin(clause);\n\t}\n\n\t_handleWhere(clause) {\n\t\tif (/^(1|'1'|true)$/i.test(clause)) {\n\t\t\tthis.query._wheres.push(clause);\n\t\t} else {\n\t\t\tthis._handleConditions('where', clause);\n\t\t}\n\t}\n\n\t_handleHaving(clause) {\n\t\tthis._handleConditions('having', clause);\n\t}\n\n\t/**\n\t * Build a conditions list\n\t * @param {String} type  Either WHERE or HAVING\n\t * @param {String} clause  The expressions following the type keyword\n\t */\n\t_handleConditions(type, clause) {\n\t\tconst andGroups = clause.split(/\\bAND\\b/i);\n\t\tandGroups.forEach(andGroup => {\n\t\t\tconst orPieces = andGroup.split(/\\bOR\\b/i).map(trim);\n\t\t\tif (orPieces.length === 1) {\n\t\t\t\t// no OR operators\n\t\t\t\tconst fn = type; // either where or having\n\t\t\t\tthis.query[fn](orPieces[0]);\n\t\t\t} else {\n\t\t\t\t// some OR operators\n\t\t\t\tconst orFn = 'or' + capitalize(type); // either orWhere or orHaving\n\t\t\t\tthis.query[orFn](orPieces);\n\t\t\t}\n\t\t});\n\t}\n\n\t_handleGroupBy(clause) {\n\t\tconst columns = clause.split(/\\s*,\\s*/);\n\t\tcolumns.forEach(column => this.query.groupBy(column));\n\t}\n\n\t_handleOrderBy(clause) {\n\t\tconst columns = clause.split(/\\s*,\\s*/);\n\t\tcolumns.forEach(column => this.query.orderBy(column));\n\t}\n\n\t_handleLimit(clause) {\n\t\tthis.limit(clause);\n\t}\n\n\t_handleOffset(clause) {\n\t\tthis.offset(clause);\n\t}\n}\n","import { Parser } from '../Parser/Parser.js';\nimport { Db } from '../Db/Db.js';\nimport cloneDeep from 'lodash.clonedeep';\nimport escapeRegExp from 'lodash.escaperegexp';\nimport forOwn from 'lodash.forown';\nimport uniq from 'lodash.uniq';\nimport substrCount from 'quickly-count-substrings';\nimport mysql from 'mysql';\n\n/**\n * Build a select query\n * Class Select\n */\nexport class Select {\n\tparse(sql) {\n\t\tthis.reset();\n\t\tconst parser = new Parser(this);\n\t\tparser.parse(sql);\n\t\treturn this;\n\t}\n\n\tstatic parse(sql) {\n\t\tconst db = Db.factory();\n\t\treturn Select.init(db).parse(sql);\n\t}\n\n\t/**\n\t * Select constructor\n\t */\n\tconstructor(Db) {\n\t\tthis.db = Db;\n\t\tthis.reset();\n\t}\n\n\t/**\n\t * Shortcut to initialize without the `new` keyword\n\t * @return {Select}\n\t */\n\tstatic init(Db) {\n\t\treturn new Select(Db);\n\t}\n\n\t/**\n\t * Get the SQL as a pretty-printed string\n\t * @return {String}\n\t */\n\ttoString() {\n\t\tconst lines = [\n\t\t\t'SELECT',\n\t\t\tthis._options.length ? `  ${this._options.join('\\n  ')}` : null,\n\t\t\tthis._columns.length ? `  ${this._columns.join(',\\n  ')}` : '  *\\n',\n\t\t\t`FROM ${this._tables.join(', ')}`,\n\t\t\tthis._joins.length ? this._joins.join('\\n') : null,\n\t\t\tthis._wheres.length ? `WHERE ${this._wheres.join('\\n  AND ')}` : null,\n\t\t\tthis._groupBys.length ? `GROUP BY ${this._groupBys.join(',\\n  ')}` : null,\n\t\t\tthis._havings.length ? `HAVING ${this._havings.join('\\n  AND ')}` : null,\n\t\t\tthis._orderBys.length ? `ORDER BY ${this._orderBys.join(',\\n  ')}` : null,\n\t\t];\n\t\tif (this._page > 0) {\n\t\t\tconst offset = (this._page - 1) * this._limit;\n\t\t\tlines.push(`LIMIT ${this._limit}`);\n\t\t\tlines.push(`OFFSET ${offset}`);\n\t\t} else {\n\t\t\tif (this._limit > 0) {\n\t\t\t\tlines.push(`LIMIT ${this._limit}`);\n\t\t\t}\n\t\t\tif (this._offset > 0) {\n\t\t\t\tlines.push(`OFFSET ${this._offset}`);\n\t\t\t}\n\t\t}\n\n\t\treturn lines\n\t\t\t.filter(Boolean)\n\t\t\t.join('\\n')\n\t\t\t.trim();\n\t}\n\n\t/**\n\t * Get the SQL as a one-line string\n\t * @return {String}\n\t */\n\tnormalized() {\n\t\tconst lines = [\n\t\t\t'SELECT',\n\t\t\tthis._options.length ? this._options.join(' ') : null,\n\t\t\tthis._columns.length ? this._columns.join(', ') : '*',\n\t\t\t`FROM ${this._tables.join(', ')}`,\n\t\t\tthis._joins.length ? this._joins.join(' ') : null,\n\t\t\tthis._wheres.length ? `WHERE ${this._wheres.join(' AND ')}` : null,\n\t\t\tthis._groupBys.length ? `GROUP BY ${this._groupBys.join(', ')}` : null,\n\t\t\tthis._havings.length ? `HAVING ${this._havings.join(' AND ')}` : null,\n\t\t\tthis._orderBys.length ? `ORDER BY ${this._orderBys.join(', ')}` : null,\n\t\t];\n\n\t\tif (this._page > 0) {\n\t\t\tconst offset = (this._page - 1) * this._limit;\n\t\t\tlines.push(`LIMIT ${this._limit}`);\n\t\t\tlines.push(`OFFSET ${offset}`);\n\t\t} else {\n\t\t\tif (this._limit > 0) {\n\t\t\t\tlines.push(`LIMIT ${this._limit}`);\n\t\t\t}\n\t\t\tif (this._offset > 0) {\n\t\t\t\tlines.push(`OFFSET ${this._offset}`);\n\t\t\t}\n\t\t}\n\n\t\treturn lines\n\t\t\t.filter(Boolean)\n\t\t\t.join(' ')\n\t\t\t.trim();\n\t}\n\n\t/**\n\t * @param {String|Array} [field]  If given, reset the given component(s), otherwise reset all query components\n\t *     Valid components: option, column, table, where, orWhere, having, groupBy, orderBy, limit, offset, page\n\t * @return {Select}\n\t */\n\treset(field = null) {\n\t\tif (Array.isArray(field)) {\n\t\t\tfield.forEach(name => this.reset(name));\n\t\t\treturn this;\n\t\t}\n\t\tif (field) {\n\t\t\tlet prop = '_' + field.replace(/s$/, '');\n\t\t\tif (\n\t\t\t\t[\n\t\t\t\t\t'option',\n\t\t\t\t\t'column',\n\t\t\t\t\t'table',\n\t\t\t\t\t'where',\n\t\t\t\t\t'having',\n\t\t\t\t\t'groupBy',\n\t\t\t\t\t'orderBy',\n\t\t\t\t].indexOf(field) > -1\n\t\t\t) {\n\t\t\t\tprop += 's';\n\t\t\t}\n\t\t\tthis[prop] = ['limit', 'offset', 'page'].indexOf(field) > -1 ? null : [];\n\t\t} else {\n\t\t\tthis._hasOne = [];\n\t\t\tthis._belongsTo = [];\n\t\t\tthis._hasMany = [];\n\t\t\tthis._habtm = [];\n\t\t\tthis._options = [];\n\t\t\tthis._columns = [];\n\t\t\tthis._tables = [];\n\t\t\tthis._joins = [];\n\t\t\tthis._wheres = [];\n\t\t\tthis._havings = [];\n\t\t\tthis._groupBys = [];\n\t\t\tthis._orderBys = [];\n\t\t\tthis._limit = null;\n\t\t\tthis._offset = null;\n\t\t\tthis._page = null;\n\t\t\tthis._bound = [];\n\t\t}\n\t\treturn this;\n\t}\n\n\t// \t\t/**\n\t// \t\t * Internal function for defining a relationship for fetching dependent or related tate\n\t// \t\t * @param {String} type  One of hasOne, hasMany, habtm\n\t// \t\t * @param array $spec  The specification for the relationship\n\t// \t\t * @return {Select}\n\t// \t\t */\n\t// \t\trelate($type, $spec) {\n\t// \t\t\tif ($type == 'habtm' || $type == 'hasAndBelongsToMany') {\n\t// \t\t\t\tthis.relationships[] = [\n\t// \t\t\t\t\t'key' => $spec['thisProperty'],\n\t// \t\t\t\t\t'type' => 'habtm',\n\t// \t\t\t\t\t'thisProperty' => @$spec['key'] ?: $spec['thisProperty'],\n\t// \t\t\t\t\t'options' => $spec\n\t// \t\t\t];\n\t// \t\t\t}\n\t// \t\t\telseif ($type == 'hasOne') {\n\t// \t\t\t\t$spec['key'] = @$spec['key'] ?: preg_replace('/^\\S+ as (\\S+)$/i', '$1', $spec['thisProperty']);\n\t// \t\t\t\t$spec['type'] = 'hasOne';\n\t// \t\t\t\tthis.relationships[] = $spec;\n\t// \t\t\t}\n\t// \t\telse {\n\t// \t\t\t\t$spec['key'] = @$spec['key'] ?: $spec['thisProperty'];\n\t// \t\t\t\t$spec['type'] = $type;\n\t// \t\t\t\tthis.relationships[] = $spec;\n\t// \t\t\t}\n\t// \t\t\treturn this;\n\t// \t\t}\n\t//\n\t// \t\t/**\n\t// \t\t * Specify to fetch dependent data of the given type\n\t// \t\t * @param {String} key  The name of the relationship as previously defined\n\t// \t\t * @return {Select}\n\t// \t\t */\n\t// \t\tcontain($key) {\n\t// \t\t\tif ($key == 'ALL') {\n\t// \t\t\t\tforeach (this.relationships as $rel) {\n\t// \t\t\t\t\tthis.{'_' . $rel['type']}[] = $rel;\n\t// \t\t\t\t}\n\t// \t\t\t\treturn this;\n\t// \t\t\t}\n\t// \t\t\tforeach (this.relationships as $rel) {\n\t// \t\t\t\tif ($key == $rel['key']) {\n\t// \t\t\t\t\tthis.{'_' . $rel['type']}[] = $rel;\n\t// \t\t\t\t\treturn this;\n\t// \t\t\t\t}\n\t// \t\t\t}\n\t// //\t\tQuickLogger::write('hasOne', pprt($key, this.relationships));\n\t// \t\t\ttrigger_error(\"Unknown contain key `$key`\", E_USER_WARNING);\n\t// \t\t\treturn this;\n\t// \t\t}\n\t//\n\thasOne(thisProperty, thatTableAndColumn) {\n\t\tthis._hasOne.push({ thisProperty, thatTableAndColumn });\n\t\treturn this;\n\t}\n\n\tbelongsTo(thisProperty, thatTableAndColumn) {\n\t\tthis._belongsTo.push({ thisProperty, thatTableAndColumn });\n\t\treturn this;\n\t}\n\n\thasMany(thisProperty, thatTableAndColumn) {\n\t\tthis._hasMany.push({ thisProperty, thatTableAndColumn });\n\t\treturn this;\n\t}\n\n\thabtm(thisProperty, idsColumn, join) {\n\t\tconst matchJoinFirst = join.match(\n\t\t\t/(?:LEFT JOIN\\s*)?(.+)\\s+ON\\s+\\1\\.id\\s*=\\s*(.+)\\.(.+)/\n\t\t);\n\t\tconst matchJoinSecond = join.match(\n\t\t\t/(?:LEFT JOIN\\s*)?(.+)\\s+ON\\s+(.+)\\.(.+)\\s*=\\s*\\1\\.id/\n\t\t);\n\t\tif (!matchJoinFirst && !matchJoinSecond) {\n\t\t\tthrow new Error(\n\t\t\t\t`Select: Unknown join pattern: \"${join}\". Expecting format \"joinTable ON joinTable.id = throughTable.foreignColumn\"`\n\t\t\t);\n\t\t}\n\t\tlet [_, joinTable, throughTable, foreignColumn] =\n\t\t\tmatchJoinFirst || matchJoinSecond;\n\t\tthis._habtm.push({\n\t\t\tthisProperty,\n\t\t\tidsColumn,\n\t\t\tjoin,\n\t\t\tjoinTable,\n\t\t\tthroughTable,\n\t\t\tforeignColumn,\n\t\t});\n\t\treturn this;\n\t}\n\n\thasAndBelongsToMany(thisProperty, idsColumn, join) {\n\t\treturn this.habtm(thisProperty, idsColumn, join);\n\t}\n\n\t/**\n\t * Bind values by name to the query\n\t * @param {Object|String} placeholder  The name of the placeholder or an object with placeholder: value pairs\n\t * @param {*} [value=null]  The value to bind when placeholder is a string\n\t * @example\n\t *     query.bind('postId', 123); // replace :postId with '123'\n\t * @return {Select}\n\t */\n\tbind(placeholder, value = null) {\n\t\tif (typeof placeholder === 'object' && value === null) {\n\t\t\tforOwn(placeholder, (val, field) => {\n\t\t\t\tthis._bound[field] = val;\n\t\t\t});\n\t\t\treturn this;\n\t\t}\n\t\tthis._bound[placeholder] = value;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind a previously bound property\n\t * @param {String} placeholder\n\t * @return {Select}\n\t */\n\tunbind(placeholder) {\n\t\tif (Array.isArray(placeholder)) {\n\t\t\tplaceholder.forEach(p => this.unbind(p));\n\t\t\treturn this;\n\t\t}\n\t\tthis._bound[placeholder] = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Fetch records and splice in related data\n\t * @return {Promise<Array>}\n\t */\n\tasync fetch(options = {}) {\n\t\toptions.sql = this.toString();\n\t\tconst records = await this.db.select(options, this._bound);\n\t\tawait this._spliceHasOnes(records);\n\t\tawait this._spliceBelongsTos(records);\n\t\tawait this._spliceHasManys(records);\n\t\tawait this._spliceHabtms(records);\n\t\treturn records;\n\t}\n\n\t/**\n\t * Fetch the first matched record\n\t * @return {Object|null}\n\t */\n\tasync fetchFirst() {\n\t\tthis.limit(1);\n\t\tconst records = await this.fetch();\n\t\treturn Array.isArray(records) && records.length ? records[0] : null;\n\t}\n\n\t/**\n\t * Fetch each record as an array of values or an array of key-value pairs\n\t * @return {Promise<Object>}\n\t */\n\tfetchHash() {\n\t\treturn this.db.selectHash(this.toString(), this._bound);\n\t}\n\n\t/**\n\t * Fetch the value of first column of the first record\n\t * @return {Promise}\n\t */\n\tfetchValue() {\n\t\treturn this.db.selectValue(this.toString(), this._bound);\n\t}\n\n\t/**\n\t * Fetch values and index by the given field name\n\t * @param {String} byField  The field by which to index (e.g. id)\n\t * @return {Promise<Object>}\n\t */\n\tasync fetchIndexed(byField) {\n\t\tconst rs = await this.fetch();\n\t\tif (!Array.isArray(rs)) {\n\t\t\treturn false;\n\t\t}\n\t\tconst indexed = {};\n\t\trs.forEach(r => (indexed[r[byField]] = r));\n\t\treturn indexed;\n\t}\n\n\t/**\n\t * Fetch values grouped by the given field name\n\t * @param {String} byField  The field by which to group\n\t * @example\n\t *      const query = Select.parse('SELECT * FROM comments');\n\t *      const byUser = query.fetchGrouped('user_id')\n\t *      // a key for each user id with an array of comments for each key\n\t * @return {Array}\n\t */\n\tasync fetchGrouped(byField) {\n\t\tconst rs = await this.fetch();\n\t\tif (!Array.isArray(rs)) {\n\t\t\treturn false;\n\t\t}\n\t\tconst grouped = {};\n\t\trs.forEach(r => {\n\t\t\tif (!grouped[r[byField]]) {\n\t\t\t\tgrouped[r[byField]] = [];\n\t\t\t}\n\t\t\tgrouped[r[byField]].push(r);\n\t\t});\n\t\treturn grouped;\n\t}\n\n\t/**\n\t * Clone this object\n\t * @return {Select}\n\t */\n\tgetClone() {\n\t\tconst copy = new Select();\n\t\tcopy._hasOne = cloneDeep(this._hasOne);\n\t\tcopy._belongsTo = cloneDeep(this._belongsTo);\n\t\tcopy._hasMany = cloneDeep(this._hasMany);\n\t\tcopy._habtm = cloneDeep(this._habtm);\n\t\tcopy._options = cloneDeep(this._options);\n\t\tcopy._columns = cloneDeep(this._columns);\n\t\tcopy._tables = cloneDeep(this._tables);\n\t\tcopy._joins = cloneDeep(this._joins);\n\t\tcopy._wheres = cloneDeep(this._wheres);\n\t\tcopy._havings = cloneDeep(this._havings);\n\t\tcopy._groupBys = cloneDeep(this._groupBys);\n\t\tcopy._orderBys = cloneDeep(this._orderBys);\n\t\tcopy._limit = this._limit;\n\t\tcopy._offset = this._offset;\n\t\tcopy._page = this._page;\n\t\tcopy._bound = cloneDeep(this._bound);\n\t\treturn copy;\n\t}\n\n\t/**\n\t * Build a version of this query that simply returns COUNT(*)\n\t * @param {String} [countExpr=\"*\"]  Use to specify `DISTINCT colname` if needed\n\t * @return {Select}  The SQL query\n\t */\n\tgetFoundRowsQuery(countExpr = '*') {\n\t\tif (this._havings.length === 0) {\n\t\t\tconst clone = this.getClone();\n\t\t\tclone._columns = [`COUNT(${countExpr}) AS foundRows`];\n\t\t\tclone._options = [];\n\t\t\tclone._groupBys = [];\n\t\t\tclone._orderBys = [];\n\t\t\tclone._limit = null;\n\t\t\tclone._offset = null;\n\t\t\tclone._page = null;\n\t\t\treturn clone;\n\t\t} else {\n\t\t\tconst subquery = this.getClone();\n\t\t\tsubquery._limit = null;\n\t\t\tsubquery._offset = null;\n\t\t\tsubquery._page = null;\n\t\t\treturn subquery;\n\t\t}\n\t}\n\n\tgetFoundRowsSql(countExpr, normalize = false) {\n\t\tconst query = this.getFoundRowsQuery(countExpr);\n\t\tif (this._havings.length === 0) {\n\t\t\treturn normalize ? query.normalized() : query.toString();\n\t\t} else if (normalize) {\n\t\t\tconst subquerySql = query.normalized();\n\t\t\treturn `SELECT COUNT(*) AS foundRows FROM (${subquerySql}) AS subq`;\n\t\t} else {\n\t\t\tconst subquerySql = query.toString().replace(/\\n/g, '\\n\\t');\n\t\t\treturn `SELECT COUNT(*) AS foundRows FROM (\\n\\t${subquerySql}\\n) AS subq`;\n\t\t}\n\t}\n\n\t/**\n\t * Run a version of this query that simply returns COUNT(*)\n\t * @param {String} [countExpr=\"*\"]  Use to specify `DISTINCT colname` if needed\n\t * @return {Promise<Number>}  The number of rows or false on error\n\t */\n\tfoundRows(countExpr = '*') {\n\t\tconst sql = this.getFoundRowsSql(countExpr);\n\t\treturn this.db.selectValue(sql, this._bound);\n\t}\n\n\t/**\n\t * Internal method to fetch hasOne dependent data and splice it into the given result set\n\t * @param {Array} records  Records from .fetch()\n\t */\n\tasync _spliceHasOnes(records) {\n\t\tif (this._hasOne.length === 0 || records.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tthis._hasOne.forEach(async spec => {\n\t\t\tconst match = spec.thisProperty.match(/^([\\w_]+) AS ([\\w_]+)$/i);\n\t\t\tlet thisProperty;\n\t\t\tif (match) {\n\t\t\t\tthisProperty = match[2];\n\t\t\t\tspec.thisColumn = match[1];\n\t\t\t} else {\n\t\t\t\tthisProperty = spec.thisProperty.replace(/_id$/, '');\n\t\t\t}\n\t\t\tconst [table, column] = spec.thatTableAndColumn.split('.');\n\t\t\tlet ids = [];\n\t\t\trecords.forEach(r => {\n\t\t\t\tif (r[spec.thisColumn]) {\n\t\t\t\t\tids.push(r[spec.thisColumn]);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (ids.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tids = uniq(ids);\n\t\t\tconst query = Select.init()\n\t\t\t\t.table(table)\n\t\t\t\t.where(column, 'IN', ids);\n\t\t\tconst indexed = await query.fetchIndexed(column);\n\t\t\trecords.forEach(r => {\n\t\t\t\tr[thisProperty] = indexed[r[spec.thisColumn]] || null;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Internal method to fetch belongTo dependent data and splice it into the given result set\n\t * @param {Array} records  The records from fetch()\n\t */\n\tasync _spliceBelongsTos(records) {\n\t\tif (this._belongsTo.length === 0 || records.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst ids = uniq(records.map(r => r.id));\n\t\tthis._belongsTo.forEach(async spec => {\n\t\t\tconst [table, column] = spec.thatTableAndColumn.split('.');\n\t\t\tconst indexed = await Select.init(this.db)\n\t\t\t\t.table(table)\n\t\t\t\t.where(column, 'IN', ids)\n\t\t\t\t.fetchIndexed(column);\n\t\t\trecords.forEach(r => {\n\t\t\t\tr[spec.thisPropery] = indexed[r.id] || null;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Internal method to fetch hasMany dependent data and splice it into the given result set\n\t * @param {Array} records  The records from fetch()\n\t */\n\tasync _spliceHasManys(records) {\n\t\tif (this._hasMany.length === 0 || records.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst ids = uniq(records.map(r => r.id));\n\t\tthis._hasMany.forEach(async spec => {\n\t\t\tconst [table, column] = spec.thatTableAndColumn.split('.');\n\t\t\tconst query = Select.init()\n\t\t\t\t.table(table)\n\t\t\t\t.where(column, 'IN', ids);\n\t\t\tconst grouped = await query.fetchGrouped(column);\n\t\t\trecords.forEach(r => {\n\t\t\t\tr[spec.thisPropery] = grouped[r.id] || [];\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Internal method to fetch habtm dependent data and splice it into the given result set\n\t * @param {Array} records  The records from fetch()\n\t * @example\n\t * const query = Select.parse('SELECT * FROM users');\n\t * query.habtm(\n\t *   'hubs',\n\t *   'SELECT user_id, client_id FROM clients_users WHERE user_id IN (?)',\n\t *   'SELECT * FROM clients WHERE id IN(?)'\n\t * );\n\t */\n\tasync _spliceHabtms(records) {\n\t\tif (this._habtm.length === 0 || records.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst ids = uniq(records.map(r => r.id));\n\t\tthis._habtm.forEach(async spec => {\n\t\t\t// const { joinTableQuery, foreignTable } = spec;\n\t\t\t// const joinTableLookup = await this.db.selectGrouped('user_id', joinTableQuery, ids);\n\t\t\t// const foreignIds = uniq(values(joinTableLookup));\n\t\t\t// const foreignQuery = Select.init()\n\t\t\t// \t.table(foreignTable)\n\t\t\t// \t.where('id', 'IN', foreignIds);\n\t\t\t// const foreignRecords = await foreignQuery.fetchIndexed('id');\n\t\t\t// const { thisProperty, idsColumn, join, throughTable, subqueryHandler } = spec;\n\t\t\t// const subquery = Select.init()\n\t\t\t// \t.table(throughTable)\n\t\t\t// \t.leftJoin(join)\n\t\t\t// \t.where(`${throughTable}.${idsColumn}`, 'IN', ids);\n\t\t\t// if (subqueryHandler) {\n\t\t\t// \tsubqueryHandler(subquery);\n\t\t\t// }\n\t\t\t// const grouped = await subquery.fetchIndexed(idsColumn);\n\t\t\t// records.forEach(r => {\n\t\t\t// \tr[thisProperty] = grouped[r.id] || [];\n\t\t\t// });\n\t\t});\n\t}\n\n\t/**\n\t * Add an array of column names to fetch\n\t * @param {String[]} columnNames  The names of columns\n\t * @return {Select}\n\t */\n\tcolumns(columnNames) {\n\t\tthis._columns = [...this._columns, ...columnNames];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a column name to fetch\n\t * @param {String} columnName  The name of the column\n\t * @return {Select}\n\t */\n\tcolumn(columnName) {\n\t\tthis._columns.push(columnName);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an option expression such as \"TOP 10\" or \"SQL_CALC_FOUND_ROWS\"\n\t * @param {String} optionExpression  Expression to go after \"SELECT\" and before column list\n\t * @return {Select}\n\t */\n\toption(optionExpression) {\n\t\tthis._options.push(optionExpression);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a table to the \"FROM\" clause (same as .from())\n\t * @param {String} tableName  The name of the table to query\n\t * @return {Select}\n\t */\n\ttable(tableName) {\n\t\tthis._tables.push(tableName);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a table to the \"FROM\" clause (same as .table())\n\t * @param {String} tableName  The name of the table to query\n\t * @return {Select}\n\t */\n\tfrom(tableName) {\n\t\tthis._tables.push(tableName);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an INNER JOIN expression (same as ->innerJoin())\n\t * @param {String} expression  The expression following the INNER JOIN keyword\n\t * @example query.join('posts p ON p.id = c.post_id');\n\t * @return {Select}\n\t */\n\tjoin(expression) {\n\t\tthis._joins.push(`INNER JOIN ${expression}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a LEFT JOIN expression\n\t * @param {String} expression  The expression following the LEFT JOIN keyword\n\t * @example query.leftJoin('posts p ON p.id = c.post_id');\n\t * @return {Select}\n\t */\n\tleftJoin(expression) {\n\t\tthis._joins.push(`LEFT JOIN ${expression}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a FULL JOIN expression\n\t * @param {String} expression  The expression following the FULL JOIN keyword\n\t * @example query.fullJoin('posts p ON p.id = c.post_id');\n\t * @return {Select}\n\t */\n\tfullJoin(expression) {\n\t\tthis._joins.push(`FULL JOIN ${expression}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a RIGHT JOIN expression\n\t * @param {String} expression  The expression following the RIGHT JOIN keyword\n\t * @example query.rightJoin('posts p ON p.id = c.post_id');\n\t * @return {Select}\n\t */\n\trightJoin(expression) {\n\t\tthis._joins.push(`RIGHT JOIN ${expression}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a CROSS JOIN expression\n\t * @param {String} expression  The expression following the CROSS JOIN keyword\n\t * @example query.join('posts p ON p.id = c.post_id');\n\t * @return {Select}\n\t */\n\tcrossJoin(expression) {\n\t\tthis._joins.push(`CROSS JOIN ${expression}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an INNER JOIN expression (same as ->join())\n\t * @param {String} expression  The expression following the INNER JOIN keyword\n\t * @example query.innerJoin('posts p ON p.id = c.post_id');\n\t * @return {Select}\n\t */\n\tinnerJoin(expression) {\n\t\tthis._joins.push(`INNER JOIN ${expression}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a LEFT OUTER JOIN expression\n\t * @param {String} expression  The expression following the LEFT OUTER JOIN keyword\n\t * @example query.leftOuterJoin('posts p ON p.id = c.post_id');\n\t * @return {Select}\n\t */\n\tleftOuterJoin(expression) {\n\t\tthis._joins.push(`LEFT OUTER JOIN ${expression}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a FULL OUTER JOIN expression\n\t * @param {String} expression  The expression following the FULL OUTER JOIN keyword\n\t * @example query.fullOuterJoin('posts p ON p.id = c.post_id');\n\t * @return {Select}\n\t */\n\tfullOuterJoin(expression) {\n\t\tthis._joins.push(`FULL OUTER JOIN ${expression}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a RIGHT OUTER JOIN expression\n\t * @param {String} expression  The expression following the RIGHT OUTER JOIN keyword\n\t * @example query.rightOuterJoin('posts p ON p.id = c.post_id');\n\t * @return {Select}\n\t */\n\trightOuterJoin(expression) {\n\t\tthis._joins.push(`RIGHT OUTER JOIN ${expression}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove a join condition with the specified table\n\t * @param {String|String[]} table  The name of the table or tables in the first part of the join statement\n\t * @return {Select}\n\t */\n\tunjoin(table) {\n\t\tif (Array.isArray(table)) {\n\t\t\ttable.forEach(t => this.unjoin(t));\n\t\t\treturn this;\n\t\t}\n\t\ttable = escapeRegExp(table);\n\t\tthis._joins = this._joins.filter(join => {\n\t\t\tconst regex = new RegExp(`^([A-Z]+) JOIN ${table}\\\\b`);\n\t\t\treturn !regex.test(join);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Utility function to add conditions for a clause (WHERE, HAVING)\n\t * @param {String} collection  The collection to add the clauses to\n\t * @param {Array} criteria  A list of expressions to stringify\n\t * @property {*} criteria[0]  The expression or name of the column on which to match\n\t * @property {*} [criteria[1]]  The comparison operator; defaults to \"=\"\n\t * @property {*} [criteria[2]]  The value to test against\n\t * @example  The following are equivalent\n\t *     this._conditions(this._wheres, ['deleted_at IS NULL']);\n\t *     this._conditions(this._wheres, ['deleted_at', null]);\n\t *     this._conditions(this._wheres, ['deleted_at', '=', null]);\n\t * @example  More examples\n\t *     this._conditions(this._wheres, ['fname', 'LIKE', 'joe']); // fname LIKE 'joe'\n\t *     this._conditions(this._wheres, ['fname', 'LIKE ?', 'joe']); // fname LIKE 'joe'\n\t *     this._conditions(this._wheres, ['fname LIKE %?%', 'joe']); // fname LIKE '%joe%'\n\t *     this._conditions(this._wheres, ['fname LIKE ?%', 'joe']); // fname LIKE 'joe%'\n\t *     this._conditions(this._wheres, ['fname', 'LIKE ?%', 'joe']); // fname LIKE 'joe%'\n\t *     this._conditions(this._wheres, ['price >', 10]); // price > '10'\n\t *     this._conditions(this._wheres, ['price', '>', 10]); // price > '10'\n\t *     this._conditions(this._wheres, ['price =', 10]); // price = '10'\n\t *     this._conditions(this._wheres, ['price !=', 10]); // price != '10'\n\t *     this._conditions(this._wheres, ['price', 10]); // price = '10'\n\t *     this._conditions(this._wheres, ['price', '=', 10]); // price = '10'\n\t *     this._conditions(this._wheres, ['price', '!=', 10]); // price != '10'\n\t *     this._conditions(this._wheres, ['price', 'BETWEEN', [10,20]]); // price BETWEEN '10' AND '20'\n\t *     this._conditions(this._wheres, ['price', 'NOT BETWEEN', [10,20]]); // price NOT BETWEEN '10' AND '20'\n\t *     this._conditions(this._wheres, ['price', [10,20]]); // price IN('10','20')\n\t *     this._conditions(this._wheres, ['price', '=', [10,20]]); // price IN('10','20')\n\t *     this._conditions(this._wheres, ['price', 'IN', [10,20]]); // price IN('10','20')\n\t *     this._conditions(this._wheres, ['price', 'NOT IN', [10,20]]); // price NOT IN('10','20')\n\t * @return {Select}\n\t */\n\t_conditions(collection, criteria) {\n\t\tif (typeof criteria === 'string') {\n\t\t\tcollection.push(criteria);\n\t\t\treturn this;\n\t\t}\n\t\tconst numArgs = criteria.length;\n\t\tlet [column, operator, value] = criteria;\n\t\tif (Array.isArray(column)) {\n\t\t\tcolumn.forEach(val => {\n\t\t\t\tthis._conditions(collection, [val]);\n\t\t\t});\n\t\t\treturn this;\n\t\t} else if (typeof column === 'object') {\n\t\t\tforOwn(column, (val, name) => {\n\t\t\t\tthis._conditions(collection, [name, val]);\n\t\t\t});\n\t\t\treturn this;\n\t\t}\n\t\tif (/^\\w+$/.test(column)) {\n\t\t\tcolumn = mysql.escapeId(column);\n\t\t}\n\t\tif (numArgs === 1) {\n\t\t\t// condition is a stand-alone expression\n\t\t\t// e.g. \"SUM(price) > 10\"\n\t\t\tcollection.push(column);\n\t\t\treturn this;\n\t\t} else if (\n\t\t\tnumArgs === 2 &&\n\t\t\tArray.isArray(operator) &&\n\t\t\toperator.length > 0 &&\n\t\t\tsubstrCount(column, '?') === operator.length\n\t\t) {\n\t\t\tconst values = operator;\n\t\t\tlet i = 0;\n\t\t\tconst sql = column.replace(/(%)?\\?(%)?/, ($0, $1, $2) => {\n\t\t\t\tconst escNoQuotes = this.escapeQuoteless(values[i++]);\n\t\t\t\treturn `'${$1}${escNoQuotes}${$2}'`;\n\t\t\t});\n\t\t\tcollection.push(sql);\n\t\t\treturn this;\n\t\t} else if (numArgs === 2) {\n\t\t\t// condition has pairs of \"column + operator\" => \"value\"\n\t\t\t// e.g. [\"price >\", 10]\n\t\t\t// e.g. [\"status LIKE ?%\", 10]\n\t\t\tvalue = operator;\n\t\t\tconst parts = column.split(' ');\n\t\t\tcolumn = parts.shift();\n\t\t\toperator = parts.join(' ');\n\t\t}\n\t\tif (!operator) {\n\t\t\toperator = '=';\n\t\t}\n\t\toperator = operator.toLocaleUpperCase();\n\t\tconst likeMatch = operator.match(\n\t\t\t/^(LIKE|NOT LIKE)(?: (\\?|\\?%|%\\?|%\\?%))?$/\n\t\t);\n\t\tif (operator === 'NOT BETWEEN' || operator === 'BETWEEN') {\n\t\t\t// expect a two-item array\n\t\t\tconst from = mysql.escape(value[0]);\n\t\t\tconst to = mysql.escape(value[1]);\n\t\t\tcollection.push(`${column} ${operator} ${from} AND ${to}`);\n\t\t} else if (likeMatch) {\n\t\t\tconst quoteless = this.escapeQuoteless(value);\n\t\t\tlet quoted;\n\t\t\tif (likeMatch[2] === '?' || !likeMatch[2]) {\n\t\t\t\tquoted = `'${quoteless}'`;\n\t\t\t} else if (likeMatch[2] === '?%') {\n\t\t\t\tquoted = `'${quoteless}%'`;\n\t\t\t} else if (likeMatch[2] === '%?') {\n\t\t\t\tquoted = `'%${quoteless}'`;\n\t\t\t} else if (likeMatch[2] === '%?%') {\n\t\t\t\tquoted = `'%${quoteless}%'`;\n\t\t\t}\n\t\t\tcollection.push(`${column} ${likeMatch[1]} ${quoted}`);\n\t\t} else if (value === null) {\n\t\t\tcollection.push(\n\t\t\t\toperator === '=' ? `${column} IS NULL` : `${column} IS NOT NULL`\n\t\t\t);\n\t\t} else if (Array.isArray(value)) {\n\t\t\t// an array of values should be IN or NOT IN\n\t\t\tconst inVals = value.map(v => mysql.escape(v));\n\t\t\tconst joined = inVals.join(',');\n\t\t\tcollection.push(\n\t\t\t\toperator === '=' || operator === 'IN'\n\t\t\t\t\t? `${column} IN(${joined})`\n\t\t\t\t\t: `${column} NOT IN(${joined})`\n\t\t\t);\n\t\t} else if (operator === 'IN' || operator === 'NOT IN') {\n\t\t\t// in clause that is not array\n\t\t\tvalue = mysql.escape(value);\n\t\t\tcollection.push(`${column} ${operator} (${value})`);\n\t\t} else {\n\t\t\tvalue = mysql.escape(value);\n\t\t\tcollection.push(`${column} ${operator} ${value}`);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a group by column or expression\n\t * @param {String} column  The name of a column (or expression) to group by\n\t * @return {Select}\n\t */\n\tgroupBy(column) {\n\t\tthis._groupBys.push(column);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add WHERE clauses to conditions (See _conditions for usage)\n\t * @param {String} column  The expression or name of the column on which to match\n\t * @param {*} [operator]  The comparison operator; defaults to \"=\"\n\t * @param {*} [value]  The value to test against\n\t * @return {Select}\n\t */\n\twhere(...args) {\n\t\tthis._conditions(this._wheres, args);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a WHERE clause with a BETWEEN condition\n\t * @param {String} column  The column name\n\t * @param {Array} twoValueArray  The two values to be between\n\t * @return {Select}\n\t */\n\twhereBetween(column, twoValueArray) {\n\t\tif (twoValueArray[0] && twoValueArray[1]) {\n\t\t\tthis.where(column, 'BETWEEN', twoValueArray);\n\t\t} else if (twoValueArray[0]) {\n\t\t\tthis.where(column, '>=', twoValueArray[0]);\n\t\t} else if (twoValueArray.length > 1) {\n\t\t\tthis.where(column, '<=', twoValueArray[1]);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add WHERE conditions to place inside an OR block (See _conditions for usage)\n\t * @param {Array} conditions  A list where each item is an array with parameters that would be taken by where()\n\t * @return {Select}\n\t */\n\torWhere(conditions) {\n\t\tconst criteria = [];\n\t\tconditions.forEach(condition => {\n\t\t\tthis._conditions(criteria, condition);\n\t\t});\n\t\tconst joined = criteria.join(' OR ');\n\t\tif (joined.slice(0, 1) === '(' && joined.slice(-1) === ')') {\n\t\t\tthis.where(joined);\n\t\t} else {\n\t\t\tthis.where(`(${joined})`);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a HAVING condition (See _conditions for usage)\n\t * @param {String} column  The expression or name of the column on which to match\n\t * @param {*} [operator]  The comparison operator; defaults to \"=\"\n\t * @param {*} [value]  The value to test against\n\t * @return {Select}\n\t */\n\thaving(...args) {\n\t\tthis._conditions(this._havings, args);\n\t\treturn this;\n\t}\n\torHaving(conditions) {\n\t\tconst criteria = [];\n\t\tconditions.forEach(condition => {\n\t\t\tthis._conditions(criteria, condition);\n\t\t});\n\t\tconst joined = criteria.join(' OR ');\n\t\tthis.having(`(${joined})`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a column or expression to order by\n\t * @param {String} column  The column name or expression to sort by. Include DESC or prefix with - to sort descending\n\t * @return {Select}\n\t */\n\torderBy(column) {\n\t\tthis._orderBys.push(column.replace(/^-(.+)/, '$1 DESC'));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sort by the given column, with a map of columns to translate\n\t * @param {String} column  The column name such as \"created_at\" or \"-created_at\" for descending\n\t * @param {Object} [mapNames={}]  Column names to translate from one name to another\n\t * @example\n\t *     query.sortField('-modified_at'); // ORDER BY modified_at DESC\n\t *     query.sortField('created_at', ['created_at'=>'created']); // ORDER BY created\n\t * @return {Select}\n\t */\n\tsortField(column, mapNames = {}) {\n\t\tconst direction = column.slice(0, 1) === '-' ? 'DESC' : 'ASC';\n\t\tcolumn = column.replace(/^-/, '');\n\t\tcolumn = mapNames[column] || column;\n\t\tthis.orderBy(`${column} ${direction}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Limit results to the given number\n\t * @param {Number} num  The number to limit by\n\t * @return {Select}\n\t */\n\tlimit(num) {\n\t\tthis._limit = Number(num) || 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Fetch results from the given offset\n\t * @param {Number} num  The offset\n\t * @return {Select}\n\t */\n\toffset(num) {\n\t\tthis._offset = Number(num) || 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the offset based on the limit with the given number of pages\n\t * @param {Number} num  The page number\n\t * @return {Select}\n\t */\n\tpage(num) {\n\t\tthis._page = Number(num) || 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Manually escape a value\n\t * @param {*} value  The value to escape\n\t * @return {string}\n\t */\n\tescape(value) {\n\t\treturn mysql.escape(value);\n\t}\n\n\t/**\n\t * Manually escape a value without quotes\n\t * @param {*} value  The value to escape without quotes\n\t * @return {string}\n\t */\n\tescapeQuoteless(value) {\n\t\tconst escaped = mysql.escape(value);\n\t\tif (escaped.slice(0, 1) === \"'\" && escaped.slice(-1) === \"'\") {\n\t\t\treturn escaped.slice(1, -1);\n\t\t}\n\t\treturn value;\n\t}\n}\n","import { Db } from './Db/Db.js';\nimport { Parser } from './Parser/Parser.js';\nimport { Select } from './Select/Select.js';\nexport { Db, Parser, Select };\n"]}