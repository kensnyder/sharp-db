{"version":3,"sources":["Db/Db.js","Parser/Parser.js","Select/Select.js","entry.js"],"names":["Db","constructor","config","env","process","host","hostname","DB_HOSTNAME","user","username","DB_USERNAME","password","DB_PASSWORD","database","DB_DATABASE","port","DB_PORT","encoding","DB_ENCODING","factory","instance","connect","connection","mysql","createConnection","err","fatal","Error","code","sqlMessage","connectOnce","select","sql","bindVars","options","bindArgs","Promise","resolve","reject","lastQuery","query","error","results","fields","lastFields","selectHash","key","name","val","hash","forEach","result","selectList","list","push","selectGrouped","groupField","selectIndexed","indexField","selectFirst","selectValue","selectExists","then","Boolean","insert","insertId","update","changedRows","delete","selectFrom","table","params","extra","escFields","map","field","escapeId","escFieldsString","length","join","escTable","escWhere","buildWheres","trim","selectId","id","selectRecordByKey","selectUuid","uuid","column","value","escColumn","findIdOrCreate","newValues","insertInto","values","insertError","insertResults","updateTable","set","where","deleteFrom","limit","wheres","clauses","hasOwnProperty","buildWhere","operator","split","toUpperCase","val0","escape","val1","Array","isArray","escVal","args","arg","replace","$0","$1","escapeQuoteless","slice","Parser","_stripComments","_extractSubqueries","subqueries","i","extractor","placeholder","_injectSubqueries","_columns","col","_split","splitter","parse","rawSql","stripped","exprs","expr","len","upper","toLocaleUpperCase","fragments","buffer","fragment","indexOf","match","innerJoin","leftJoin","leftOuterJoin","rightJoin","rightOuterJoin","crossJoin","fullJoin","fullOuterJoin","handleConditions","fn","toLowerCase","bind","type","clause","andGroups","andGroup","orPieces","orFn","Select","reset","parser","init","toString","lines","_options","_tables","_joins","_wheres","_groupBys","_havings","_orderBys","_page","offset","_limit","_offset","filter","normalized","prop","_hasOne","_belongsTo","_hasMany","_habtm","_bound","hasOne","thisProperty","thatTableAndColumn","belongsTo","hasMany","habtm","idsColumn","matchJoinFirst","matchJoinSecond","_","joinTable","throughTable","foreignColumn","hasAndBelongsToMany","unbind","p","undefined","fetch","records","_spliceHasOnes","_spliceBelongsTos","_spliceHasManys","_spliceHabtms","fetchFirst","fetchHash","fetchValue","fetchIndexed","byField","rs","indexed","r","fetchGrouped","grouped","getClone","copy","getFoundRowsQuery","countExpr","query2","subquery","subquerySql","foundRows","spec","thisColumn","ids","thisPropery","columns","columnNames","columnName","option","optionExpression","tableName","from","expression","unjoin","t","regex","RegExp","test","_conditions","collection","criteria","numArgs","$2","escNoQuotes","parts","shift","likeMatch","to","quoteless","quoted","inVals","v","joined","groupBy","whereBetween","twoValueArray","orWhere","conditions","condition","having","orHaving","orderBy","sortField","mapNames","direction","num","Number","page","escaped"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAEA;;;AAGO,MAAMA,EAAN,CAAS;AACf;;;;AAIAC,EAAAA,WAAW,CAACC,MAAM,GAAG,EAAV,EAAc;AACxB,UAAMC,GAAG,GACR,OAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACD,GAAf,KAAuB,QAAtD,GACGC,OAAO,CAACD,GADX,GAEG,EAHJ;AAIA,SAAKD,MAAL,GAAc;AACbG,MAAAA,IAAI,EAAEH,MAAM,CAACI,QAAP,IAAmBH,GAAG,CAACI,WAAvB,IAAsC,WAD/B;AAEbC,MAAAA,IAAI,EAAEN,MAAM,CAACO,QAAP,IAAmBN,GAAG,CAACO,WAAvB,IAAsC,MAF/B;AAGbC,MAAAA,QAAQ,EAAET,MAAM,CAACS,QAAP,IAAmBR,GAAG,CAACS,WAAvB,IAAsC,EAHnC;AAIbC,MAAAA,QAAQ,EAAEX,MAAM,CAACW,QAAP,IAAmBV,GAAG,CAACW,WAAvB,IAAsC,UAJnC;AAKbC,MAAAA,IAAI,EAAEb,MAAM,CAACa,IAAP,IAAeZ,GAAG,CAACa,OAAnB,IAA8B,IALvB;AAMbC,MAAAA,QAAQ,EAAEf,MAAM,CAACe,QAAP,IAAmBd,GAAG,CAACe,WAAvB,IAAsC;AANnC,KAAd;AAQA;AAED;;;;;;;AAKA,SAAOC,OAAP,CAAejB,MAAM,GAAG,EAAxB,EAA4B;AAC3B,QAAI,CAACF,EAAE,CAACoB,QAAR,EAAkB;AACjBpB,MAAAA,EAAE,CAACoB,QAAH,GAAc,IAAIpB,EAAJ,CAAOE,MAAP,CAAd;AACA;;AACD,WAAOF,EAAE,CAACoB,QAAV;AACA;AAED;;;;;AAGAC,EAAAA,OAAO,GAAG;AACT,SAAKC,UAAL,GAAkBC,eAAMC,gBAAN,CAAuB,KAAKtB,MAA5B,CAAlB;AACA,SAAKoB,UAAL,CAAgBD,OAAhB,CAAwBI,GAAG,IAAI;AAC9B,UAAIA,GAAG,IAAIA,GAAG,CAACC,KAAf,EAAsB;AACrB,cAAM,IAAIC,KAAJ,CAAW,IAAGF,GAAG,CAACG,IAAK,KAAIH,GAAG,CAACI,UAAW,EAA1C,CAAN;AACA;AACD,KAJD;AAKA;AAED;;;;;AAGAC,EAAAA,WAAW,GAAG;AACb,QAAI,CAAC,KAAKR,UAAV,EAAsB;AACrB,WAAKD,OAAL;AACA;AACD,GAnDc,CAqDf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AAMAU,EAAAA,MAAM,CAACC,GAAD,EAAM,GAAGC,QAAT,EAAmB;AACxB,SAAKH,WAAL;AACA,UAAMI,OAAO,GAAG,KAAKC,QAAL,CAAcH,GAAd,EAAmBC,QAAnB,CAAhB;AACA,WAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,WAAKC,SAAL,GAAiB,KAAKjB,UAAL,CAAgBkB,KAAhB,CAChBN,OADgB,EAEhB,CAACO,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,KAA4B;AAC3B,YAAIF,KAAJ,EAAW;AACVH,UAAAA,MAAM,CAACG,KAAD,CAAN;AACA,SAFD,MAEO;AACN,eAAKG,UAAL,GAAkBD,MAAlB;AACAN,UAAAA,OAAO,CAACK,OAAD,CAAP;AACA;AACD,OATe,CAAjB;AAWA,KAZM,CAAP;AAaA;AAED;;;;;;;;AAMAG,EAAAA,UAAU,CAACb,GAAD,EAAM,GAAGC,QAAT,EAAmB;AAC5B,SAAKH,WAAL;AACA,UAAMI,OAAO,GAAG,KAAKC,QAAL,CAAcH,GAAd,EAAmBC,QAAnB,CAAhB;AACA,WAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,WAAKC,SAAL,GAAiB,KAAKjB,UAAL,CAAgBkB,KAAhB,CAChBN,OADgB,EAEhBD,QAFgB,EAGhB,CAACQ,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,KAA4B;AAC3B,YAAIF,KAAJ,EAAW;AACVH,UAAAA,MAAM,CAACG,KAAD,CAAN;AACA,SAFD,MAEO;AACN,eAAKG,UAAL,GAAkBD,MAAlB;AACA,gBAAMG,GAAG,GAAGH,MAAM,CAAC,CAAD,CAAN,CAAUI,IAAtB;AACA,gBAAMC,GAAG,GAAGL,MAAM,CAAC,CAAD,CAAN,CAAUI,IAAtB;AACA,gBAAME,IAAI,GAAG,EAAb;AACAP,UAAAA,OAAO,CAACQ,OAAR,CAAgBC,MAAM,IAAI;AACzBF,YAAAA,IAAI,CAACE,MAAM,CAACL,GAAD,CAAP,CAAJ,GAAoBK,MAAM,CAACH,GAAD,CAA1B;AACA,WAFD;AAGAX,UAAAA,OAAO,CAACY,IAAD,CAAP;AACA;AACD,OAhBe,CAAjB;AAkBA,KAnBM,CAAP;AAoBA;AAED;;;;;;;;AAMAG,EAAAA,UAAU,CAACpB,GAAD,EAAM,GAAGC,QAAT,EAAmB;AAC5B,SAAKH,WAAL;AACA,UAAMI,OAAO,GAAG,KAAKC,QAAL,CAAcH,GAAd,EAAmBC,QAAnB,CAAhB;AACA,WAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,WAAKC,SAAL,GAAiB,KAAKjB,UAAL,CAAgBkB,KAAhB,CAChBN,OADgB,EAEhB,CAACO,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,KAA4B;AAC3B,YAAIF,KAAJ,EAAW;AACVH,UAAAA,MAAM,CAACG,KAAD,CAAN;AACA,SAFD,MAEO;AACN,eAAKG,UAAL,GAAkBD,MAAlB;AACA,gBAAMI,IAAI,GAAGJ,MAAM,CAAC,CAAD,CAAN,CAAUI,IAAvB;AACA,gBAAMM,IAAI,GAAG,EAAb;AACAX,UAAAA,OAAO,CAACQ,OAAR,CAAgBC,MAAM,IAAIE,IAAI,CAACC,IAAL,CAAUH,MAAM,CAACJ,IAAD,CAAhB,CAA1B;AACAV,UAAAA,OAAO,CAACgB,IAAD,CAAP;AACA;AACD,OAZe,CAAjB;AAcA,KAfM,CAAP;AAgBA;AAED;;;;;;;;;AAOAE,EAAAA,aAAa,CAACC,UAAD,EAAaxB,GAAb,EAAkB,GAAGC,QAArB,EAA+B;AAC3C,SAAKH,WAAL;AACA,UAAMI,OAAO,GAAG,KAAKC,QAAL,CAAcH,GAAd,EAAmBC,QAAnB,CAAhB;AACA,WAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,WAAKC,SAAL,GAAiB,KAAKjB,UAAL,CAAgBkB,KAAhB,CAChBN,OADgB,EAEhB,CAACO,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,KAA4B;AAC3B,YAAIF,KAAJ,EAAW;AACVH,UAAAA,MAAM,CAACG,KAAD,CAAN;AACA,SAFD,MAEO;AACN,eAAKG,UAAL,GAAkBD,MAAlB;AACA,gBAAMM,IAAI,GAAG,EAAb;AACAP,UAAAA,OAAO,CAACQ,OAAR,CAAgBC,MAAM,IAAI;AACzB,gBAAI,CAACF,IAAI,CAACE,MAAM,CAACK,UAAD,CAAP,CAAT,EAA+B;AAC9BP,cAAAA,IAAI,CAACE,MAAM,CAACK,UAAD,CAAP,CAAJ,GAA2B,EAA3B;AACA;;AACDP,YAAAA,IAAI,CAACE,MAAM,CAACK,UAAD,CAAP,CAAJ,CAAyBF,IAAzB,CAA8BH,MAA9B;AACA,WALD;AAMAd,UAAAA,OAAO,CAACY,IAAD,CAAP;AACA;AACD,OAhBe,CAAjB;AAkBA,KAnBM,CAAP;AAoBA;AAED;;;;;;;;;AAOAQ,EAAAA,aAAa,CAACC,UAAD,EAAa1B,GAAb,EAAkB,GAAGC,QAArB,EAA+B;AAC3C,SAAKH,WAAL;AACA,UAAMI,OAAO,GAAG,KAAKC,QAAL,CAAcH,GAAd,EAAmBC,QAAnB,CAAhB;AACA,WAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,WAAKC,SAAL,GAAiB,KAAKjB,UAAL,CAAgBkB,KAAhB,CAChBN,OADgB,EAEhB,CAACO,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,KAA4B;AAC3B,YAAIF,KAAJ,EAAW;AACVH,UAAAA,MAAM,CAACG,KAAD,CAAN;AACA,SAFD,MAEO;AACN,eAAKG,UAAL,GAAkBD,MAAlB;AACA,gBAAMM,IAAI,GAAG,EAAb;AACAP,UAAAA,OAAO,CAACQ,OAAR,CAAgBC,MAAM,IAAI;AACzBF,YAAAA,IAAI,CAACE,MAAM,CAACO,UAAD,CAAP,CAAJ,GAA2BP,MAA3B;AACA,WAFD;AAGAd,UAAAA,OAAO,CAACY,IAAD,CAAP;AACA;AACD,OAbe,CAAjB;AAeA,KAhBM,CAAP;AAiBA;AAED;;;;;;;;AAMAU,EAAAA,WAAW,CAAC3B,GAAD,EAAM,GAAGC,QAAT,EAAmB;AAC7B,SAAKH,WAAL;AACA,UAAMI,OAAO,GAAG,KAAKC,QAAL,CAAcH,GAAd,EAAmBC,QAAnB,CAAhB;AACA,WAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,WAAKC,SAAL,GAAiB,KAAKjB,UAAL,CAAgBkB,KAAhB,CAChBN,OADgB,EAEhB,CAACO,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,KAA4B;AAC3B,YAAIF,KAAJ,EAAW;AACVH,UAAAA,MAAM,CAACG,KAAD,CAAN;AACA,SAFD,MAEO;AACN,eAAKG,UAAL,GAAkBD,MAAlB;AACAN,UAAAA,OAAO,CAACK,OAAO,CAAC,CAAD,CAAR,CAAP;AACA;AACD,OATe,CAAjB;AAWA,KAZM,CAAP;AAaA;AAED;;;;;;;;AAMAkB,EAAAA,WAAW,CAAC5B,GAAD,EAAM,GAAGC,QAAT,EAAmB;AAC7B,SAAKH,WAAL;AACA,UAAMI,OAAO,GAAG,KAAKC,QAAL,CAAcH,GAAd,EAAmBC,QAAnB,CAAhB;AACA,WAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,WAAKC,SAAL,GAAiB,KAAKjB,UAAL,CAAgBkB,KAAhB,CAChBN,OADgB,EAEhB,CAACO,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,KAA4B;AAC3B,YAAIF,KAAJ,EAAW;AACVH,UAAAA,MAAM,CAACG,KAAD,CAAN;AACA,SAFD,MAEO;AACN,eAAKG,UAAL,GAAkBD,MAAlB;AACA,gBAAMI,IAAI,GAAGJ,MAAM,CAAC,CAAD,CAAN,CAAUI,IAAvB;AACAV,UAAAA,OAAO,CAACK,OAAO,CAAC,CAAD,CAAP,CAAWK,IAAX,CAAD,CAAP;AACA;AACD,OAVe,CAAjB;AAYA,KAbM,CAAP;AAcA;AAED;;;;;;;;AAMAc,EAAAA,YAAY,CAAC7B,GAAD,EAAM,GAAGC,QAAT,EAAmB;AAC9B,UAAMC,OAAO,GAAG,KAAKC,QAAL,CAAcH,GAAd,EAAmBC,QAAnB,CAAhB;AACAC,IAAAA,OAAO,CAACF,GAAR,GAAe,kBAAiBE,OAAO,CAACF,GAAI,oBAA5C;AACA,WAAO,KAAK4B,WAAL,CAAiB1B,OAAjB,EAA0B4B,IAA1B,CAA+BC,OAA/B,CAAP;AACA;AAED;;;;;;;;AAMAC,EAAAA,MAAM,CAAChC,GAAD,EAAM,GAAGC,QAAT,EAAmB;AACxB,SAAKH,WAAL;AACA,UAAMI,OAAO,GAAG,KAAKC,QAAL,CAAcH,GAAd,EAAmBC,QAAnB,CAAhB;AACA,WAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,WAAKC,SAAL,GAAiB,KAAKjB,UAAL,CAAgBkB,KAAhB,CAAsBN,OAAtB,EAA+B,CAACO,KAAD,EAAQC,OAAR,KAAoB;AACnE,YAAID,KAAJ,EAAW;AACVH,UAAAA,MAAM,CAACG,KAAD,CAAN;AACA,SAFD,MAEO;AACNJ,UAAAA,OAAO,CAACK,OAAO,CAACuB,QAAT,CAAP;AACA;AACD,OANgB,CAAjB;AAOA,KARM,CAAP;AASA;AAED;;;;;;;;AAMAC,EAAAA,MAAM,CAAClC,GAAD,EAAM,GAAGC,QAAT,EAAmB;AACxB,SAAKH,WAAL;AACA,UAAMI,OAAO,GAAG,KAAKC,QAAL,CAAcH,GAAd,EAAmBC,QAAnB,CAAhB;AACA,WAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,WAAKC,SAAL,GAAiB,KAAKjB,UAAL,CAAgBkB,KAAhB,CAAsBN,OAAtB,EAA+B,CAACO,KAAD,EAAQC,OAAR,KAAoB;AACnE,YAAID,KAAJ,EAAW;AACVH,UAAAA,MAAM,CAACG,KAAD,CAAN;AACA,SAFD,MAEO;AACNJ,UAAAA,OAAO,CAACK,OAAO,CAACyB,WAAT,CAAP;AACA;AACD,OANgB,CAAjB;AAOA,KARM,CAAP;AASA;AAED;;;;;;;;AAMAC,EAAAA,MAAM,CAACpC,GAAD,EAAM,GAAGC,QAAT,EAAmB;AACxB,WAAO,KAAKiC,MAAL,CAAYlC,GAAZ,EAAiB,GAAGC,QAApB,CAAP;AACA;AAED;;;;;;;;;;AAQAoC,EAAAA,UAAU,CAACC,KAAD,EAAQ3B,MAAM,GAAG,EAAjB,EAAqB4B,MAAM,GAAG,EAA9B,EAAkCC,KAAK,GAAG,EAA1C,EAA8C;AACvD,SAAK1C,WAAL;AACA,UAAM2C,SAAS,GAAG9B,MAAM,CAAC+B,GAAP,CAAWC,KAAK,IAAIpD,eAAMqD,QAAN,CAAeD,KAAf,CAApB,CAAlB;AACA,UAAME,eAAe,GAAGlC,MAAM,CAACmC,MAAP,GAAgBL,SAAS,CAACM,IAAV,CAAe,IAAf,CAAhB,GAAuC,GAA/D;;AACA,UAAMC,QAAQ,GAAGzD,eAAMqD,QAAN,CAAeN,KAAf,CAAjB;;AACA,UAAMW,QAAQ,GAAG,KAAKC,WAAL,CAAiBX,MAAjB,KAA4B,GAA7C;AACA,UAAMvC,GAAG,GAAI,UAAS6C,eAAgB,SAAQG,QAAS,UAASC,QAAS,IAAGT,KAAM,EAAtE,CAAwEW,IAAxE,EAAZ;AACA,WAAO,KAAKpD,MAAL,CAAYC,GAAZ,CAAP;AACA;AAED;;;;;;;;AAMAoD,EAAAA,QAAQ,CAACd,KAAD,EAAQe,EAAR,EAAY;AACnB,WAAO,KAAKC,iBAAL,CAAuBhB,KAAvB,EAA8B,IAA9B,EAAoCe,EAApC,CAAP;AACA;AAED;;;;;;;;AAMAE,EAAAA,UAAU,CAACjB,KAAD,EAAQkB,IAAR,EAAc;AACvB,WAAO,KAAKF,iBAAL,CAAuBhB,KAAvB,EAA8B,MAA9B,EAAsCkB,IAAtC,CAAP;AACA;AAED;;;;;;;;;AAOAF,EAAAA,iBAAiB,CAAChB,KAAD,EAAQmB,MAAR,EAAgBC,KAAhB,EAAuB;AACvC,UAAMV,QAAQ,GAAGzD,eAAMqD,QAAN,CAAeN,KAAf,CAAjB;;AACA,UAAMqB,SAAS,GAAGpE,eAAMqD,QAAN,CAAea,MAAf,CAAlB;;AACA,WAAO,KAAK9B,WAAL,CACL,iBAAgBqB,QAAS,UAASW,SAAU,MADvC,EAEND,KAFM,CAAP;AAIA;AAED;;;;;;;;;;AAQAE,EAAAA,cAAc,CAACtB,KAAD,EAAQmB,MAAR,EAAgBC,KAAhB,EAAuBG,SAAS,GAAG,EAAnC,EAAuC;AACpD,UAAMb,QAAQ,GAAGzD,eAAMqD,QAAN,CAAeN,KAAf,CAAjB;;AACA,UAAMqB,SAAS,GAAGpE,eAAMqD,QAAN,CAAea,MAAf,CAAlB;;AACA,WAAO,KAAK9B,WAAL,CACL,kBAAiBqB,QAAS,UAASW,SAAU,MADxC,EAEND,KAFM,EAGL5B,IAHK,CAGAuB,EAAE,IAAI;AACZ,UAAIA,EAAJ,EAAQ;AACP,eAAOA,EAAP;AACA;;AACD,aAAO,KAAKS,UAAL,CAAgBxB,KAAhB;AAAyB,SAACmB,MAAD,GAAUC;AAAnC,SAA6CG,SAA7C,EAAP;AACA,KARM,CAAP;AASA;AAED;;;;;;;;AAMAC,EAAAA,UAAU,CAACxB,KAAD,EAAQyB,MAAR,EAAgB;AACzB,SAAKjE,WAAL;AACA,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,YAAM0C,QAAQ,GAAGzD,eAAMqD,QAAN,CAAeN,KAAf,CAAjB,CADuC,CAEvC;;;AACA,YAAMtC,GAAG,GAAI,eAAcgD,QAAS,QAApC;AACA,WAAKzC,SAAL,GAAiB,KAAKjB,UAAL,CAAgBkB,KAAhB,CAAsBR,GAAtB,EAA2B+D,MAA3B,EAAmCtD,KAAK,IAAI;AAC5D,YAAIA,KAAJ,EAAW;AACVH,UAAAA,MAAM,CAACG,KAAD,CAAN;AACA,SAFD,MAEO;AACN,eAAKnB,UAAL,CAAgBkB,KAAhB,CACC,+BADD,EAEC,CAACwD,WAAD,EAAcC,aAAd,KAAgC;AAC/B,gBAAID,WAAJ,EAAiB;AAChB1D,cAAAA,MAAM,CAAC0D,WAAD,CAAN;AACA,aAFD,MAEO;AACN3D,cAAAA,OAAO,CAAC4D,aAAa,CAAC,CAAD,CAAb,CAAiBZ,EAAlB,CAAP;AACA;AACD,WARF;AAUA;AACD,OAfgB,CAAjB;AAgBA,KApBM,CAAP;AAqBA;AAED;;;;;;;;;AAOAa,EAAAA,WAAW,CAAC5B,KAAD,EAAQ6B,GAAR,EAAaC,KAAK,GAAG,EAArB,EAAyB;AACnC,SAAKtE,WAAL;;AACA,UAAMkD,QAAQ,GAAGzD,eAAMqD,QAAN,CAAeN,KAAf,CAAjB;;AACA,UAAMW,QAAQ,GAAG,KAAKC,WAAL,CAAiBkB,KAAjB,CAAjB;AACA,UAAMpE,GAAG,GAAI,UAASgD,QAAS,gBAAeC,QAAS,EAAvD;AACA,WAAO,KAAKlD,MAAL,CAAYC,GAAZ,EAAiBmE,GAAjB,CAAP;AACA;AAED;;;;;;;;;AAOAE,EAAAA,UAAU,CAAC/B,KAAD,EAAQ8B,KAAR,EAAeE,KAAK,GAAG,IAAvB,EAA6B;AACtC,SAAKxE,WAAL;;AACA,UAAMkD,QAAQ,GAAGzD,eAAMqD,QAAN,CAAeN,KAAf,CAAjB;;AACA,UAAMW,QAAQ,GAAG,KAAKC,WAAL,CAAiBkB,KAAjB,CAAjB;AACA,QAAIpE,GAAG,GAAI,eAAcgD,QAAS,UAASC,QAAS,EAApD;;AACA,QAAIqB,KAAK,GAAG,CAAZ,EAAe;AACdtE,MAAAA,GAAG,GAAI,GAAEA,GAAI,SAAQsE,KAAM,EAA3B;AACA;;AACD,WAAO,KAAKlC,MAAL,CAAYpC,GAAZ,CAAP;AACA;AAED;;;;;;;AAKAkD,EAAAA,WAAW,CAACqB,MAAD,EAAS;AACnB,UAAMC,OAAO,GAAG,EAAhB;;AACA,SAAK,MAAM7B,KAAX,IAAoB4B,MAApB,EAA4B;AAC3B,UAAI,CAACA,MAAM,CAACE,cAAP,CAAsB9B,KAAtB,CAAL,EAAmC;AAClC;AACA;;AACD6B,MAAAA,OAAO,CAAClD,IAAR,CAAa,KAAKoD,UAAL,CAAgB/B,KAAhB,EAAuB4B,MAAM,CAAC5B,KAAD,CAA7B,CAAb;AACA;;AACD,WAAO6B,OAAO,CAAC1B,MAAR,GAAiB0B,OAAO,CAACzB,IAAR,CAAa,OAAb,CAAjB,GAAyC,GAAhD;AACA;AAED;;;;;;;;;;;;;;;;AAcA2B,EAAAA,UAAU,CAAC/B,KAAD,EAAQe,KAAR,EAAe;AACxB,QAAI,CAAC3C,IAAD,EAAO4D,QAAP,IAAmBhC,KAAK,CAACiC,KAAN,CAAY,GAAZ,CAAvB;AACA7D,IAAAA,IAAI,GAAGxB,eAAMqD,QAAN,CAAe7B,IAAf,CAAP;AACA4D,IAAAA,QAAQ,GAAGA,QAAQ,GAAGA,QAAQ,CAACE,WAAT,EAAH,GAA4B,GAA/C;;AACA,QAAIF,QAAQ,KAAK,SAAjB,EAA4B;AAC3B,YAAMG,IAAI,GAAGvF,eAAMwF,MAAN,CAAarB,KAAK,CAAC,CAAD,CAAlB,CAAb;;AACA,YAAMsB,IAAI,GAAGzF,eAAMwF,MAAN,CAAarB,KAAK,CAAC,CAAD,CAAlB,CAAb;;AACA,aAAQ,GAAE3C,IAAK,YAAW+D,IAAK,QAAOE,IAAK,EAA3C;AACA,KAJD,MAIO,IAAItB,KAAK,KAAK,IAAd,EAAoB;AAC1B,aAAOiB,QAAQ,KAAK,GAAb,GAAoB,GAAE5D,IAAK,UAA3B,GAAwC,GAAEA,IAAK,cAAtD;AACA,KAFM,MAEA,IAAIkE,KAAK,CAACC,OAAN,CAAcxB,KAAd,CAAJ,EAA0B;AAChC,YAAMK,MAAM,GAAGL,KAAK,CAAChB,GAAN,CAAU1B,GAAG,IAAIzB,eAAMwF,MAAN,CAAa/D,GAAb,CAAjB,CAAf;AACA,aAAO2D,QAAQ,KAAK,GAAb,IAAoBA,QAAQ,KAAK,IAAjC,GACH,GAAE5D,IAAK,OAAMgD,MAAO,GADjB,GAEH,GAAEhD,IAAK,WAAUgD,MAAO,GAF5B;AAGA;;AACD,UAAMoB,MAAM,GAAG5F,eAAMwF,MAAN,CAAarB,KAAb,CAAf;;AACA,WAAQ,GAAE3C,IAAK,IAAG4D,QAAS,IAAGQ,MAAO,EAArC;AACA;AAED;;;;;;;;;;;;;AAWAhF,EAAAA,QAAQ,CAACH,GAAD,EAAMoF,IAAN,EAAY;AACnB,UAAMlF,OAAO,GAAG,OAAOF,GAAP,IAAc,QAAd,GAAyBA,GAAzB,GAA+B;AAAEA,MAAAA;AAAF,KAA/C;;AACA,QAAI,OAAOE,OAAO,CAACF,GAAf,KAAuB,QAA3B,EAAqC;AACpCE,MAAAA,OAAO,CAACF,GAAR,GAAc,EAAd;AACA;;AACD,QAAI,CAACiF,KAAK,CAACC,OAAN,CAAcE,IAAd,CAAL,EAA0B;AACzB,aAAOlF,OAAP;AACA;;AACDkF,IAAAA,IAAI,CAAClE,OAAL,CAAamE,GAAG,IAAI;AACnB,UAAIA,GAAG,IAAI,OAAOA,GAAP,KAAe,QAAtB,IAAkC,CAACJ,KAAK,CAACC,OAAN,CAAcG,GAAd,CAAvC,EAA2D;AAC1DnF,QAAAA,OAAO,CAACF,GAAR,GAAcE,OAAO,CAACF,GAAR,CAAYsF,OAAZ,CAAoB,YAApB,EAAkC,CAACC,EAAD,EAAKC,EAAL,KAAY;AAC3D,cAAIH,GAAG,CAACZ,cAAJ,CAAmBe,EAAnB,CAAJ,EAA4B;AAC3B,mBAAOjG,eAAMwF,MAAN,CAAaM,GAAG,CAACG,EAAD,CAAhB,CAAP;AACA;;AACD,iBAAOD,EAAP;AACA,SALa,CAAd;AAMA,OAPD,MAOO;AACNrF,QAAAA,OAAO,CAACF,GAAR,GAAcE,OAAO,CAACF,GAAR,CAAYsF,OAAZ,CAAoB,GAApB,EAAyB/F,eAAMwF,MAAN,CAAaM,GAAb,CAAzB,CAAd;AACA;AACD,KAXD;AAYA,WAAOnF,OAAP;AACA;AAED;;;;;;;AAKA6E,EAAAA,MAAM,CAACrB,KAAD,EAAQ;AACb,WAAOnE,eAAMwF,MAAN,CAAarB,KAAb,CAAP;AACA;AAED;;;;;;;AAKA+B,EAAAA,eAAe,CAAC/B,KAAD,EAAQ;AACtB,WAAOnE,eAAMwF,MAAN,CAAarB,KAAb,EAAoBgC,KAApB,CAA0B,CAA1B,EAA6B,CAAC,CAA9B,CAAP;AACA;;AAvkBc;;;;;;;;;;;ACLhB;;AACA;;;;AAEA;;;AAGO,MAAMC,MAAN,CAAa;AACnB;;;;AAIA1H,EAAAA,WAAW,CAACuC,KAAD,EAAQ;AAClB,SAAKA,KAAL,GAAaA,KAAb;AACA;AAED;;;;;;;AAKAoF,EAAAA,cAAc,CAAC5F,GAAD,EAAM;AACnB;AACAA,IAAAA,GAAG,GAAGA,GAAG,CAACsF,OAAJ,CAAY,mBAAZ,EAAiC,EAAjC,CAAN,CAFmB,CAGnB;;AACAtF,IAAAA,GAAG,GAAGA,GAAG,CAACsF,OAAJ,CAAY,+BAAZ,EAA6C,EAA7C,CAAN;AACA,WAAOtF,GAAP;AACA;AAED;;;;;;;AAKA6F,EAAAA,kBAAkB,CAAC7F,GAAD,EAAM;AACvB,UAAM8F,UAAU,GAAG,EAAnB;AACA,QAAIC,CAAC,GAAG,CAAR;;AACA,UAAMC,SAAS,GAAGT,EAAE,IAAI;AACvB,YAAMU,WAAW,GAAI,cAAaF,CAAC,EAAG,GAAtC;AACAD,MAAAA,UAAU,CAACG,WAAD,CAAV,GAA0BV,EAA1B;AACA,aAAOU,WAAP;AACA,KAJD,CAHuB,CAQvB;;;AACAjG,IAAAA,GAAG,GAAGA,GAAG,CAACsF,OAAJ,CAAY,4BAAZ,EAA0CU,SAA1C,CAAN,CATuB,CAUvB;;AACAhG,IAAAA,GAAG,GAAGA,GAAG,CAACsF,OAAJ,CAAY,oBAAZ,EAAkCU,SAAlC,CAAN;AACA,WAAO;AAAEhG,MAAAA,GAAF;AAAO8F,MAAAA;AAAP,KAAP;AACA;AAED;;;;;;AAIAI,EAAAA,iBAAiB,CAACJ,UAAD,EAAa;AAC7B,SAAKtF,KAAL,CAAW2F,QAAX,GAAsB,KAAK3F,KAAL,CAAW2F,QAAX,CAAoBzD,GAApB,CAAwB0D,GAAG,IAAI;AACpD,aAAON,UAAU,CAACM,GAAD,CAAV,IAAmBA,GAA1B;AACA,KAFqB,CAAtB;AAGA;AAED;;;;;;;AAKAC,EAAAA,MAAM,CAACrG,GAAD,EAAM;AACX,UAAMsG,QAAQ,GAAG,4KAAjB;AACA,WAAOtG,GAAG,CAAC4E,KAAJ,CAAU0B,QAAV,CAAP;AACA;AAED;;;;;;;AAKAC,EAAAA,KAAK,CAACC,MAAD,EAAS;AACb,UAAMC,QAAQ,GAAG,KAAKb,cAAL,CAAoBY,MAApB,CAAjB;;AACA,QAAI;AAAExG,MAAAA,GAAF;AAAO8F,MAAAA;AAAP,QAAsB,KAAKD,kBAAL,CAAwBY,QAAxB,CAA1B;;AACA,QAAIC,KAAK,GAAG,KAAKL,MAAL,CAAYrG,GAAZ,CAAZ;;AACA,QAAI2G,IAAJ;;AACA,SAAK,IAAIZ,CAAC,GAAG,CAAR,EAAWa,GAAG,GAAGF,KAAK,CAAC5D,MAA5B,EAAoCiD,CAAC,GAAGa,GAAxC,EAA6Cb,CAAC,EAA9C,EAAkD;AACjDY,MAAAA,IAAI,GAAGD,KAAK,CAACX,CAAD,CAAL,CAAS5C,IAAT,EAAP;AACA,UAAI0D,KAAK,GAAGF,IAAI,CAACG,iBAAL,EAAZ;;AACA,UAAID,KAAK,KAAK,QAAd,EAAwB;AACvBd,QAAAA,CAAC;AACDY,QAAAA,IAAI,GAAGD,KAAK,CAACX,CAAD,CAAZ;AACAc,QAAAA,KAAK,GAAGF,IAAI,CAACG,iBAAL,EAAR;;AACA,YAAID,KAAK,KAAK,qBAAV,IAAmCA,KAAK,CAACnB,KAAN,CAAY,CAAZ,EAAe,CAAf,MAAsB,KAA7D,EAAoE;AACnE,eAAKlF,KAAL,CAAWN,OAAX,CAAmByG,IAAnB;AACAZ,UAAAA,CAAC;AACDY,UAAAA,IAAI,GAAGD,KAAK,CAACX,CAAD,CAAZ;AACA;;AACD,YAAIgB,SAAS,GAAGJ,IAAI,CAAC/B,KAAL,CAAW,OAAX,CAAhB,CATuB,CAUvB;;AACA,YAAIoC,MAAM,GAAG,EAAb;AACAD,QAAAA,SAAS,CAAC7F,OAAV,CAAkB+F,QAAQ,IAAI;AAC7B,cAAID,MAAM,CAAClE,MAAX,EAAmB;AAClB;AACAkE,YAAAA,MAAM,IAAIC,QAAQ,GAAG,GAArB;;AACA,gBAAIA,QAAQ,CAACC,OAAT,CAAiB,GAAjB,IAAwB,CAA5B,EAA+B;AAC9B;AACAF,cAAAA,MAAM,GAAG,EAAT;AACA;AACD,WAPD,MAOO,IAAIC,QAAQ,CAACE,KAAT,CAAe,UAAf,CAAJ,EAAgC;AACtCH,YAAAA,MAAM,GAAGC,QAAQ,GAAG,GAApB;AACA,WAFM,MAEA;AACN,kBAAMxD,MAAM,GAAGqC,UAAU,CAACmB,QAAD,CAAV,IAAwBA,QAAvC;AACA,iBAAKzG,KAAL,CAAWiD,MAAX,CAAkBA,MAAM,CAACN,IAAP,EAAlB;AACA;AACD,SAdD;AAeA,OA3BD,MA2BO,IAAI0D,KAAK,KAAK,MAAd,EAAsB;AAC5Bd,QAAAA,CAAC;AACDY,QAAAA,IAAI,GAAGD,KAAK,CAACX,CAAD,CAAL,CAAS5C,IAAT,EAAP;AACAwD,QAAAA,IAAI,CAAC/B,KAAL,CAAW,SAAX,EAAsB1D,OAAtB,CAA8BoB,KAAK,IAAI,KAAK9B,KAAL,CAAW8B,KAAX,CAAiBA,KAAjB,CAAvC;AACA,OAJM,MAIA,IAAIuE,KAAK,CAACnB,KAAN,CAAY,CAAC,CAAb,MAAoB,MAAxB,EAAgC;AACtCK,QAAAA,CAAC;AACDY,QAAAA,IAAI,GAAGD,KAAK,CAACX,CAAD,CAAZ;;AACA,gBAAQc,KAAR;AACC,eAAK,MAAL;AACA,eAAK,YAAL;AACA;AACC,iBAAKrG,KAAL,CAAW4G,SAAX,CAAqBT,IAArB;AACA;;AACD,eAAK,WAAL;AACC,iBAAKnG,KAAL,CAAW6G,QAAX,CAAoBV,IAApB;AACA;;AACD,eAAK,iBAAL;AACC,iBAAKnG,KAAL,CAAW8G,aAAX,CAAyBX,IAAzB;AACA;;AACD,eAAK,YAAL;AACC,iBAAKnG,KAAL,CAAW+G,SAAX,CAAqBZ,IAArB;AACA;;AACD,eAAK,kBAAL;AACC,iBAAKnG,KAAL,CAAWgH,cAAX,CAA0Bb,IAA1B;AACA;;AACD,eAAK,YAAL;AACC,iBAAKnG,KAAL,CAAWiH,SAAX,CAAqBd,IAArB;AACA;;AACD,eAAK,WAAL;AACC,iBAAKnG,KAAL,CAAWkH,QAAX,CAAoBf,IAApB;AACA;;AACD,eAAK,iBAAL;AACC,iBAAKnG,KAAL,CAAWmH,aAAX,CAAyBhB,IAAzB;AACA;AA1BF;AA4BA,OA/BM,MA+BA,IAAIE,KAAK,KAAK,OAAV,IAAqBA,KAAK,KAAK,QAAnC,EAA6C;AACnD,aAAKe,gBAAL,CAAsBf,KAAtB,EAA6BH,KAAK,CAAC,EAAEX,CAAH,CAAlC;AACA,OAFM,MAEA,IAAIc,KAAK,KAAK,UAAV,IAAwBA,KAAK,KAAK,UAAtC,EAAkD;AACxDd,QAAAA,CAAC;AACD,YAAI8B,EAAE,GAAGhB,KAAK,CAACnB,KAAN,CAAY,CAAZ,EAAe,CAAf,EAAkBoC,WAAlB,KAAkC,IAA3C;AACAnB,QAAAA,IAAI,GAAGD,KAAK,CAACX,CAAD,CAAL,CAAS5C,IAAT,EAAP;AACAwD,QAAAA,IAAI,CAAC/B,KAAL,CAAW,SAAX,EAAsB1D,OAAtB,CAA8B,KAAKV,KAAL,CAAWqH,EAAX,EAAeE,IAAf,CAAoB,KAAKvH,KAAzB,CAA9B;AACA,OALM,MAKA,IAAIqG,KAAK,KAAK,OAAV,IAAqBA,KAAK,KAAK,QAAnC,EAA6C;AACnDd,QAAAA,CAAC;AACD,YAAI8B,EAAE,GAAGhB,KAAK,CAACiB,WAAN,EAAT;AACAnB,QAAAA,IAAI,GAAGD,KAAK,CAACX,CAAD,CAAL,CAAS5C,IAAT,EAAP;AACA,aAAK3C,KAAL,CAAWqH,EAAX,EAAelB,IAAf;AACA;AACD;;AACD,SAAKT,iBAAL,CAAuBJ,UAAvB;;AACA,WAAO,IAAP;AACA;AAED;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA8B,EAAAA,gBAAgB,CAACI,IAAD,EAAOC,MAAP,EAAe;AAC9B,UAAMC,SAAS,GAAGD,MAAM,CAACrD,KAAP,CAAa,UAAb,CAAlB;AACAsD,IAAAA,SAAS,CAAChH,OAAV,CAAkBiH,QAAQ,IAAI;AAC7B,YAAMC,QAAQ,GAAGD,QAAQ,CAACvD,KAAT,CAAe,SAAf,EAA0BlC,GAA1B,CAA8BS,gBAA9B,CAAjB;;AACA,UAAIiF,QAAQ,CAACtF,MAAT,KAAoB,CAAxB,EAA2B;AAC1B;AACA,cAAM+E,EAAE,GAAGG,IAAI,CAACF,WAAL,EAAX,CAF0B,CAEK;;AAC/B,aAAKtH,KAAL,CAAWqH,EAAX,EAAeO,QAAQ,CAAC,CAAD,CAAvB;AACA,OAJD,MAIO;AACN;AACA,cAAMC,IAAI,GAAG,OAAO,qBAAWL,IAAX,CAApB,CAFM,CAEgC;;AACtC,aAAKxH,KAAL,CAAW6H,IAAX,EAAiBD,QAAjB;AACA;AACD,KAXD;AAYA;;AA3LkB;;;;;;;;;;;ACNpB;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;AAIO,MAAME,MAAN,CAAa;AACnB/B,EAAAA,KAAK,CAACvG,GAAD,EAAM;AACV,SAAKuI,KAAL;AACA,UAAMC,MAAM,GAAG,IAAI7C,cAAJ,CAAW,IAAX,CAAf;AACA6C,IAAAA,MAAM,CAACjC,KAAP,CAAavG,GAAb;AACA,WAAO,IAAP;AACA;;AAED,SAAOuG,KAAP,CAAavG,GAAb,EAAkB;AACjB,WAAOsI,MAAM,CAACG,IAAP,CAAYzK,OAAGmB,OAAH,EAAZ,EAA0BoH,KAA1B,CAAgCvG,GAAhC,CAAP;AACA;AAED;;;;;AAGA/B,EAAAA,WAAW,CAACD,EAAD,EAAK;AACf,SAAKA,EAAL,GAAUA,EAAV;AACA,SAAKuK,KAAL;AACA;AAED;;;;;;AAIA,SAAOE,IAAP,CAAYzK,EAAZ,EAAgB;AACf,WAAO,IAAIsK,MAAJ,CAAWtK,EAAX,CAAP;AACA;AAED;;;;;;AAIA0K,EAAAA,QAAQ,GAAG;AACV,UAAMC,KAAK,GAAG,CACb,QADa,EAEb,KAAKC,QAAL,CAAc9F,MAAd,GAAwB,KAAI,KAAK8F,QAAL,CAAc7F,IAAd,CAAmB,MAAnB,CAA2B,EAAvD,GAA2D,IAF9C,EAGb,KAAKoD,QAAL,CAAcrD,MAAd,GAAwB,KAAI,KAAKqD,QAAL,CAAcpD,IAAd,CAAmB,OAAnB,CAA4B,EAAxD,GAA4D,OAH/C,EAIZ,QAAO,KAAK8F,OAAL,CAAa9F,IAAb,CAAkB,IAAlB,CAAwB,EAJnB,EAKb,KAAK+F,MAAL,CAAYhG,MAAZ,GAAqB,KAAKgG,MAAL,CAAY/F,IAAZ,CAAiB,IAAjB,CAArB,GAA8C,IALjC,EAMb,KAAKgG,OAAL,CAAajG,MAAb,GAAuB,SAAQ,KAAKiG,OAAL,CAAahG,IAAb,CAAkB,UAAlB,CAA8B,EAA7D,GAAiE,IANpD,EAOb,KAAKiG,SAAL,CAAelG,MAAf,GAAyB,YAAW,KAAKkG,SAAL,CAAejG,IAAf,CAAoB,OAApB,CAA6B,EAAjE,GAAqE,IAPxD,EAQb,KAAKkG,QAAL,CAAcnG,MAAd,GAAwB,UAAS,KAAKmG,QAAL,CAAclG,IAAd,CAAmB,UAAnB,CAA+B,EAAhE,GAAoE,IARvD,EASb,KAAKmG,SAAL,CAAepG,MAAf,GAAyB,YAAW,KAAKoG,SAAL,CAAenG,IAAf,CAAoB,OAApB,CAA6B,EAAjE,GAAqE,IATxD,CAAd;;AAWA,QAAI,KAAKoG,KAAL,GAAa,CAAjB,EAAoB;AACnB,YAAMC,MAAM,GAAG,CAAC,KAAKD,KAAL,GAAa,CAAd,IAAmB,KAAKE,MAAvC;AACAV,MAAAA,KAAK,CAACrH,IAAN,CAAY,SAAQ,KAAK+H,MAAO,EAAhC;AACAV,MAAAA,KAAK,CAACrH,IAAN,CAAY,UAAS8H,MAAO,EAA5B;AACA,KAJD,MAIO;AACN,UAAI,KAAKC,MAAL,GAAc,CAAlB,EAAqB;AACpBV,QAAAA,KAAK,CAACrH,IAAN,CAAY,SAAQ,KAAK+H,MAAO,EAAhC;AACA;;AACD,UAAI,KAAKC,OAAL,GAAe,CAAnB,EAAsB;AACrBX,QAAAA,KAAK,CAACrH,IAAN,CAAY,UAAS,KAAKgI,OAAQ,EAAlC;AACA;AACD;;AAED,WAAOX,KAAK,CACVY,MADK,CACExH,OADF,EAELgB,IAFK,CAEA,IAFA,EAGLI,IAHK,EAAP;AAIA;AAED;;;;;;AAIAqG,EAAAA,UAAU,GAAG;AACZ,UAAMb,KAAK,GAAG,CACb,QADa,EAEb,KAAKC,QAAL,CAAc9F,MAAd,GAAuB,KAAK8F,QAAL,CAAc7F,IAAd,CAAmB,GAAnB,CAAvB,GAAiD,IAFpC,EAGb,KAAKoD,QAAL,CAAcrD,MAAd,GAAuB,KAAKqD,QAAL,CAAcpD,IAAd,CAAmB,IAAnB,CAAvB,GAAkD,KAHrC,EAIZ,QAAO,KAAK8F,OAAL,CAAa9F,IAAb,CAAkB,IAAlB,CAAwB,GAJnB,EAKb,KAAK+F,MAAL,CAAYhG,MAAZ,GAAqB,KAAKgG,MAAL,CAAY/F,IAAZ,CAAiB,GAAjB,CAArB,GAA6C,IALhC,EAMb,KAAKgG,OAAL,CAAajG,MAAb,GAAuB,SAAQ,KAAKiG,OAAL,CAAahG,IAAb,CAAkB,OAAlB,CAA2B,EAA1D,GAA8D,IANjD,EAOb,KAAKiG,SAAL,CAAelG,MAAf,GAAyB,YAAW,KAAKkG,SAAL,CAAejG,IAAf,CAAoB,IAApB,CAA0B,EAA9D,GAAkE,IAPrD,EAQb,KAAKkG,QAAL,CAAcnG,MAAd,GAAwB,UAAS,KAAKmG,QAAL,CAAclG,IAAd,CAAmB,OAAnB,CAA4B,EAA7D,GAAiE,IARpD,EASb,KAAKmG,SAAL,CAAepG,MAAf,GAAyB,YAAW,KAAKoG,SAAL,CAAenG,IAAf,CAAoB,IAApB,CAA0B,EAA9D,GAAkE,IATrD,CAAd;;AAYA,QAAI,KAAKoG,KAAL,GAAa,CAAjB,EAAoB;AACnB,YAAMC,MAAM,GAAG,CAAC,KAAKD,KAAL,GAAa,CAAd,IAAmB,KAAKE,MAAvC;AACAV,MAAAA,KAAK,CAACrH,IAAN,CAAY,SAAQ,KAAK+H,MAAO,EAAhC;AACAV,MAAAA,KAAK,CAACrH,IAAN,CAAY,UAAS8H,MAAO,EAA5B;AACA,KAJD,MAIO;AACN,UAAI,KAAKC,MAAL,GAAc,CAAlB,EAAqB;AACpBV,QAAAA,KAAK,CAACrH,IAAN,CAAY,SAAQ,KAAK+H,MAAO,EAAhC;AACA;;AACD,UAAI,KAAKC,OAAL,GAAe,CAAnB,EAAsB;AACrBX,QAAAA,KAAK,CAACrH,IAAN,CAAY,UAAS,KAAKgI,OAAQ,EAAlC;AACA;AACD;;AAED,WAAOX,KAAK,CACVY,MADK,CACExH,OADF,EAELgB,IAFK,CAEA,GAFA,EAGLI,IAHK,EAAP;AAIA;AAED;;;;;;;AAKAoF,EAAAA,KAAK,CAAC5F,KAAK,GAAG,IAAT,EAAe;AACnB,QAAIsC,KAAK,CAACC,OAAN,CAAcvC,KAAd,CAAJ,EAA0B;AACzBA,MAAAA,KAAK,CAACzB,OAAN,CAAcH,IAAI,IAAI,KAAKwH,KAAL,CAAWxH,IAAX,CAAtB;AACA,aAAO,IAAP;AACA;;AACD,QAAI4B,KAAJ,EAAW;AACV,UAAI8G,IAAI,GAAG,MAAM9G,KAAK,CAAC2C,OAAN,CAAc,IAAd,EAAoB,EAApB,CAAjB;;AACA,UACC,CAAC,QAAD,EAAW,QAAX,EAAqB,OAArB,EAA8B,OAA9B,EAAuC,QAAvC,EAAiD,SAAjD,EAA4D,SAA5D,EAAuE4B,OAAvE,CAA+EvE,KAA/E,IAAwF,CAAC,CAD1F,EAEE;AACD8G,QAAAA,IAAI,IAAI,GAAR;AACA;;AACD,WAAKA,IAAL,IAAa,CAAC,OAAD,EAAU,QAAV,EAAoB,MAApB,EAA4BvC,OAA5B,CAAoCvE,KAApC,IAA6C,CAAC,CAA9C,GAAkD,IAAlD,GAAyD,EAAtE;AACA,KARD,MAQO;AACN,WAAK+G,OAAL,GAAe,EAAf;AACA,WAAKC,UAAL,GAAkB,EAAlB;AACA,WAAKC,QAAL,GAAgB,EAAhB;AACA,WAAKC,MAAL,GAAc,EAAd;AACA,WAAKjB,QAAL,GAAgB,EAAhB;AACA,WAAKzC,QAAL,GAAgB,EAAhB;AACA,WAAK0C,OAAL,GAAe,EAAf;AACA,WAAKC,MAAL,GAAc,EAAd;AACA,WAAKC,OAAL,GAAe,EAAf;AACA,WAAKE,QAAL,GAAgB,EAAhB;AACA,WAAKD,SAAL,GAAiB,EAAjB;AACA,WAAKE,SAAL,GAAiB,EAAjB;AACA,WAAKG,MAAL,GAAc,IAAd;AACA,WAAKC,OAAL,GAAe,IAAf;AACA,WAAKH,KAAL,GAAa,IAAb;AACA,WAAKW,MAAL,GAAc,EAAd;AACA;;AACD,WAAO,IAAP;AACA,GAxIkB,CA0InB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,EAAAA,MAAM,CAACC,YAAD,EAAeC,kBAAf,EAAmC;AACxC,SAAKP,OAAL,CAAapI,IAAb,CAAkB;AAAE0I,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,KAAlB;;AACA,WAAO,IAAP;AACA;;AAEDC,EAAAA,SAAS,CAACF,YAAD,EAAeC,kBAAf,EAAmC;AAC3C,SAAKN,UAAL,CAAgBrI,IAAhB,CAAqB;AAAE0I,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,KAArB;;AACA,WAAO,IAAP;AACA;;AAEDE,EAAAA,OAAO,CAACH,YAAD,EAAeC,kBAAf,EAAmC;AACzC,SAAKL,QAAL,CAActI,IAAd,CAAmB;AAAE0I,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,KAAnB;;AACA,WAAO,IAAP;AACA;;AAEDG,EAAAA,KAAK,CAACJ,YAAD,EAAeK,SAAf,EAA0BtH,IAA1B,EAAgC;AACpC,UAAMuH,cAAc,GAAGvH,IAAI,CAACoE,KAAL,CAAW,sDAAX,CAAvB;AACA,UAAMoD,eAAe,GAAGxH,IAAI,CAACoE,KAAL,CAAW,sDAAX,CAAxB;;AACA,QAAI,CAACmD,cAAD,IAAmB,CAACC,eAAxB,EAAyC;AACxC,YAAM,IAAI5K,KAAJ,CACJ,kCAAiCoD,IAAK,8EADlC,CAAN;AAGA;;AACD,QAAI,CAACyH,CAAD,EAAIC,SAAJ,EAAeC,YAAf,EAA6BC,aAA7B,IAA8CL,cAAc,IAAIC,eAApE;;AACA,SAAKV,MAAL,CAAYvI,IAAZ,CAAiB;AAChB0I,MAAAA,YADgB;AAEhBK,MAAAA,SAFgB;AAGhBtH,MAAAA,IAHgB;AAIhB0H,MAAAA,SAJgB;AAKhBC,MAAAA,YALgB;AAMhBC,MAAAA;AANgB,KAAjB;;AAQA,WAAO,IAAP;AACA;;AAEDC,EAAAA,mBAAmB,CAACZ,YAAD,EAAeK,SAAf,EAA0BtH,IAA1B,EAAgC;AAClD,WAAO,KAAKqH,KAAL,CAAWJ,YAAX,EAAyBK,SAAzB,EAAoCtH,IAApC,CAAP;AACA;AAED;;;;;;;;;;AAQAgF,EAAAA,IAAI,CAAC9B,WAAD,EAAcvC,KAAK,GAAG,IAAtB,EAA4B;AAC/B,QAAI,OAAOuC,WAAP,KAAuB,QAAvB,IAAmCvC,KAAK,KAAK,IAAjD,EAAuD;AACtD,4BAAOuC,WAAP,EAAoB,CAACjF,GAAD,EAAM2B,KAAN,KAAgB;AACnC,aAAKmH,MAAL,CAAYnH,KAAZ,IAAqB3B,GAArB;AACA,OAFD;AAGA,aAAO,IAAP;AACA;;AACD,SAAK8I,MAAL,CAAY7D,WAAZ,IAA2BvC,KAA3B;AACA,WAAO,IAAP;AACA;AAED;;;;;;;AAKAmH,EAAAA,MAAM,CAAC5E,WAAD,EAAc;AACnB,QAAIhB,KAAK,CAACC,OAAN,CAAce,WAAd,CAAJ,EAAgC;AAC/BA,MAAAA,WAAW,CAAC/E,OAAZ,CAAoB4J,CAAC,IAAI,KAAKD,MAAL,CAAYC,CAAZ,CAAzB;AACA,aAAO,IAAP;AACA;;AACD,SAAKhB,MAAL,CAAY7D,WAAZ,IAA2B8E,SAA3B;AACA,WAAO,IAAP;AACA;AAED;;;;;;AAIA,QAAMC,KAAN,CAAY9K,OAAO,GAAG,EAAtB,EAA0B;AACzBA,IAAAA,OAAO,CAACF,GAAR,GAAc,KAAK0I,QAAL,EAAd;AACA,UAAMuC,OAAO,GAAG,MAAMjN,OAAGmB,OAAH,GAAaY,MAAb,CAAoBG,OAApB,EAA6B,KAAK4J,MAAlC,CAAtB;AACA,UAAM,KAAKoB,cAAL,CAAoBD,OAApB,CAAN;AACA,UAAM,KAAKE,iBAAL,CAAuBF,OAAvB,CAAN;AACA,UAAM,KAAKG,eAAL,CAAqBH,OAArB,CAAN;AACA,UAAM,KAAKI,aAAL,CAAmBJ,OAAnB,CAAN;AACA,WAAOA,OAAP;AACA;AAED;;;;;;AAIA,QAAMK,UAAN,GAAmB;AAClB,SAAKhH,KAAL,CAAW,CAAX;AACA,UAAM2G,OAAO,GAAG,MAAM,KAAKD,KAAL,EAAtB;AACA,WAAO/F,KAAK,CAACC,OAAN,CAAc+F,OAAd,KAA0BA,OAAO,CAACnI,MAAlC,GAA2CmI,OAAO,CAAC,CAAD,CAAlD,GAAwD,IAA/D;AACA;AAED;;;;;;AAIAM,EAAAA,SAAS,GAAG;AACX,WAAOvN,OAAGmB,OAAH,GAAa0B,UAAb,CAAwB,KAAK6H,QAAL,EAAxB,EAAyC,KAAKoB,MAA9C,CAAP;AACA;AAED;;;;;;AAIA0B,EAAAA,UAAU,GAAG;AACZ,WAAOxN,OAAGmB,OAAH,GAAayC,WAAb,CAAyB,KAAK8G,QAAL,EAAzB,EAA0C,KAAKoB,MAA/C,CAAP;AACA;AAED;;;;;;;AAKA,QAAM2B,YAAN,CAAmBC,OAAnB,EAA4B;AAC3B,UAAMC,EAAE,GAAG,MAAM,KAAKX,KAAL,EAAjB;;AACA,QAAI,CAAC/F,KAAK,CAACC,OAAN,CAAcyG,EAAd,CAAL,EAAwB;AACvB,aAAO,KAAP;AACA;;AACD,UAAMC,OAAO,GAAG,EAAhB;AACAD,IAAAA,EAAE,CAACzK,OAAH,CAAW2K,CAAC,IAAKD,OAAO,CAACC,CAAC,CAACH,OAAD,CAAF,CAAP,GAAsBG,CAAvC;AACA,WAAOD,OAAP;AACA;AAED;;;;;;;;;;;AASA,QAAME,YAAN,CAAmBJ,OAAnB,EAA4B;AAC3B,UAAMC,EAAE,GAAG,MAAM,KAAKX,KAAL,EAAjB;;AACA,QAAI,CAAC/F,KAAK,CAACC,OAAN,CAAcyG,EAAd,CAAL,EAAwB;AACvB,aAAO,KAAP;AACA;;AACD,UAAMI,OAAO,GAAG,EAAhB;AACAJ,IAAAA,EAAE,CAACzK,OAAH,CAAW2K,CAAC,IAAI;AACf,UAAI,CAACE,OAAO,CAACF,CAAC,CAACH,OAAD,CAAF,CAAZ,EAA0B;AACzBK,QAAAA,OAAO,CAACF,CAAC,CAACH,OAAD,CAAF,CAAP,GAAsB,EAAtB;AACA;;AACDK,MAAAA,OAAO,CAACF,CAAC,CAACH,OAAD,CAAF,CAAP,CAAoBpK,IAApB,CAAyBuK,CAAzB;AACA,KALD;AAMA,WAAOE,OAAP;AACA;AAED;;;;;;AAIAC,EAAAA,QAAQ,GAAG;AACV,UAAMC,IAAI,GAAG,IAAI3D,MAAJ,EAAb;AACA2D,IAAAA,IAAI,CAACvC,OAAL,GAAe,qBAAU,KAAKA,OAAf,CAAf;AACAuC,IAAAA,IAAI,CAACtC,UAAL,GAAkB,qBAAU,KAAKA,UAAf,CAAlB;AACAsC,IAAAA,IAAI,CAACrC,QAAL,GAAgB,qBAAU,KAAKA,QAAf,CAAhB;AACAqC,IAAAA,IAAI,CAACpC,MAAL,GAAc,qBAAU,KAAKA,MAAf,CAAd;AACAoC,IAAAA,IAAI,CAACrD,QAAL,GAAgB,qBAAU,KAAKA,QAAf,CAAhB;AACAqD,IAAAA,IAAI,CAAC9F,QAAL,GAAgB,qBAAU,KAAKA,QAAf,CAAhB;AACA8F,IAAAA,IAAI,CAACpD,OAAL,GAAe,qBAAU,KAAKA,OAAf,CAAf;AACAoD,IAAAA,IAAI,CAACnD,MAAL,GAAc,qBAAU,KAAKA,MAAf,CAAd;AACAmD,IAAAA,IAAI,CAAClD,OAAL,GAAe,qBAAU,KAAKA,OAAf,CAAf;AACAkD,IAAAA,IAAI,CAAChD,QAAL,GAAgB,qBAAU,KAAKA,QAAf,CAAhB;AACAgD,IAAAA,IAAI,CAACjD,SAAL,GAAiB,qBAAU,KAAKA,SAAf,CAAjB;AACAiD,IAAAA,IAAI,CAAC/C,SAAL,GAAiB,qBAAU,KAAKA,SAAf,CAAjB;AACA+C,IAAAA,IAAI,CAAC5C,MAAL,GAAc,KAAKA,MAAnB;AACA4C,IAAAA,IAAI,CAAC3C,OAAL,GAAe,KAAKA,OAApB;AACA2C,IAAAA,IAAI,CAAC9C,KAAL,GAAa,KAAKA,KAAlB;AACA8C,IAAAA,IAAI,CAACnC,MAAL,GAAc,qBAAU,KAAKA,MAAf,CAAd;AACA,WAAOmC,IAAP;AACA;AAED;;;;;;;AAKAC,EAAAA,iBAAiB,CAACC,SAAS,GAAG,GAAb,EAAkB;AAClC,QAAI,KAAKlD,QAAL,CAAcnG,MAAd,KAAyB,CAA7B,EAAgC;AAC/B,YAAMsJ,MAAM,GAAG,KAAKJ,QAAL,EAAf;AACAI,MAAAA,MAAM,CAACjG,QAAP,GAAkB,CAAE,SAAQgG,SAAU,gBAApB,CAAlB;AACAC,MAAAA,MAAM,CAACxD,QAAP,GAAkB,EAAlB;AACAwD,MAAAA,MAAM,CAACpD,SAAP,GAAmB,EAAnB;AACAoD,MAAAA,MAAM,CAAClD,SAAP,GAAmB,EAAnB;AACAkD,MAAAA,MAAM,CAAC/C,MAAP,GAAgB,IAAhB;AACA+C,MAAAA,MAAM,CAAC9C,OAAP,GAAiB,IAAjB;AACA8C,MAAAA,MAAM,CAACjD,KAAP,GAAe,IAAf;AACA,aAAOiD,MAAM,CAAC1D,QAAP,EAAP;AACA,KAVD,MAUO;AACN,YAAM2D,QAAQ,GAAG,KAAKL,QAAL,EAAjB;AACAK,MAAAA,QAAQ,CAAChD,MAAT,GAAkB,IAAlB;AACAgD,MAAAA,QAAQ,CAAC/C,OAAT,GAAmB,IAAnB;AACA+C,MAAAA,QAAQ,CAAClD,KAAT,GAAiB,IAAjB;AACA,YAAMmD,WAAW,GAAGD,QAAQ,CAAC3D,QAAT,GAAoBpD,OAApB,CAA4B,KAA5B,EAAmC,MAAnC,CAApB;AACA,YAAMtF,GAAG,GAAI,0CAAyCsM,WAAY,aAAlE;AACA,aAAOtM,GAAP;AACA;AACD;AAED;;;;;;;AAKAuM,EAAAA,SAAS,CAACJ,SAAS,GAAG,GAAb,EAAkB;AAC1B,UAAMnM,GAAG,GAAG,KAAKkM,iBAAL,CAAuBC,SAAvB,CAAZ;AACA,WAAOnO,OAAGmB,OAAH,GAAayC,WAAb,CAAyB5B,GAAzB,EAA8B,KAAK8J,MAAnC,CAAP;AACA;AAED;;;;;;AAIA,QAAMoB,cAAN,CAAqBD,OAArB,EAA8B;AAC7B,QAAI,KAAKvB,OAAL,CAAa5G,MAAb,KAAwB,CAAxB,IAA6BmI,OAAO,CAACnI,MAAR,KAAmB,CAApD,EAAuD;AACtD;AACA;;AACD,SAAK4G,OAAL,CAAaxI,OAAb,CAAqB,MAAMsL,IAAN,IAAc;AAClC,YAAMrF,KAAK,GAAGqF,IAAI,CAACxC,YAAL,CAAkB7C,KAAlB,CAAwB,yBAAxB,CAAd;AACA,UAAI6C,YAAJ;;AACA,UAAI7C,KAAJ,EAAW;AACV6C,QAAAA,YAAY,GAAG7C,KAAK,CAAC,CAAD,CAApB;AACAqF,QAAAA,IAAI,CAACC,UAAL,GAAkBtF,KAAK,CAAC,CAAD,CAAvB;AACA,OAHD,MAGO;AACN6C,QAAAA,YAAY,GAAGwC,IAAI,CAACxC,YAAL,CAAkB1E,OAAlB,CAA0B,MAA1B,EAAkC,EAAlC,CAAf;AACA;;AACD,YAAM,CAAChD,KAAD,EAAQmB,MAAR,IAAkB+I,IAAI,CAACvC,kBAAL,CAAwBrF,KAAxB,CAA8B,GAA9B,CAAxB;AACA,UAAI8H,GAAG,GAAG,EAAV;AACAzB,MAAAA,OAAO,CAAC/J,OAAR,CAAgB2K,CAAC,IAAI;AACpB,YAAIA,CAAC,CAACW,IAAI,CAACC,UAAN,CAAL,EAAwB;AACvBC,UAAAA,GAAG,CAACpL,IAAJ,CAASuK,CAAC,CAACW,IAAI,CAACC,UAAN,CAAV;AACA;AACD,OAJD;;AAKA,UAAIC,GAAG,CAAC5J,MAAJ,KAAe,CAAnB,EAAsB;AACrB;AACA;;AACD4J,MAAAA,GAAG,GAAG,sBAAKA,GAAL,CAAN;AACA,YAAMlM,KAAK,GAAG8H,MAAM,CAACG,IAAP,GACZnG,KADY,CACNA,KADM,EAEZ8B,KAFY,CAENX,MAFM,EAEE,IAFF,EAEQiJ,GAFR,CAAd;AAGA,YAAMd,OAAO,GAAG,MAAMpL,KAAK,CAACiL,YAAN,CAAmBhI,MAAnB,CAAtB;AACAwH,MAAAA,OAAO,CAAC/J,OAAR,CAAgB2K,CAAC,IAAI;AACpBA,QAAAA,CAAC,CAAC7B,YAAD,CAAD,GAAkB4B,OAAO,CAACC,CAAC,CAACW,IAAI,CAACC,UAAN,CAAF,CAAP,IAA+B,IAAjD;AACA,OAFD;AAGA,KA3BD;AA4BA;AAED;;;;;;AAIA,QAAMtB,iBAAN,CAAwBF,OAAxB,EAAiC;AAChC,QAAI,KAAKtB,UAAL,CAAgB7G,MAAhB,KAA2B,CAA3B,IAAgCmI,OAAO,CAACnI,MAAR,KAAmB,CAAvD,EAA0D;AACzD;AACA;;AACD,UAAM4J,GAAG,GAAG,sBAAKzB,OAAO,CAACvI,GAAR,CAAYmJ,CAAC,IAAIA,CAAC,CAACxI,EAAnB,CAAL,CAAZ;;AACA,SAAKsG,UAAL,CAAgBzI,OAAhB,CAAwB,MAAMsL,IAAN,IAAc;AACrC,YAAM,CAAClK,KAAD,EAAQmB,MAAR,IAAkB+I,IAAI,CAACvC,kBAAL,CAAwBrF,KAAxB,CAA8B,GAA9B,CAAxB;AACA,YAAMgH,OAAO,GAAG,MAAMtD,MAAM,CAACG,IAAP,GACpBnG,KADoB,CACdA,KADc,EAEpB8B,KAFoB,CAEdX,MAFc,EAEN,IAFM,EAEAiJ,GAFA,EAGpBjB,YAHoB,CAGPhI,MAHO,CAAtB;AAIAwH,MAAAA,OAAO,CAAC/J,OAAR,CAAgB2K,CAAC,IAAI;AACpBA,QAAAA,CAAC,CAACW,IAAI,CAACG,WAAN,CAAD,GAAsBf,OAAO,CAACC,CAAC,CAACxI,EAAH,CAAP,IAAiB,IAAvC;AACA,OAFD;AAGA,KATD;AAUA;AAED;;;;;;AAIA,QAAM+H,eAAN,CAAsBH,OAAtB,EAA+B;AAC9B,QAAI,KAAKrB,QAAL,CAAc9G,MAAd,KAAyB,CAAzB,IAA8BmI,OAAO,CAACnI,MAAR,KAAmB,CAArD,EAAwD;AACvD;AACA;;AACD,UAAM4J,GAAG,GAAG,sBAAKzB,OAAO,CAACvI,GAAR,CAAYmJ,CAAC,IAAIA,CAAC,CAACxI,EAAnB,CAAL,CAAZ;;AACA,SAAKuG,QAAL,CAAc1I,OAAd,CAAsB,MAAMsL,IAAN,IAAc;AACnC,YAAM,CAAClK,KAAD,EAAQmB,MAAR,IAAkB+I,IAAI,CAACvC,kBAAL,CAAwBrF,KAAxB,CAA8B,GAA9B,CAAxB;AACA,YAAMpE,KAAK,GAAG8H,MAAM,CAACG,IAAP,GACZnG,KADY,CACNA,KADM,EAEZ8B,KAFY,CAENX,MAFM,EAEE,IAFF,EAEQiJ,GAFR,CAAd;AAGA,YAAMX,OAAO,GAAG,MAAMvL,KAAK,CAACsL,YAAN,CAAmBrI,MAAnB,CAAtB;AACAwH,MAAAA,OAAO,CAAC/J,OAAR,CAAgB2K,CAAC,IAAI;AACpBA,QAAAA,CAAC,CAACW,IAAI,CAACG,WAAN,CAAD,GAAsBZ,OAAO,CAACF,CAAC,CAACxI,EAAH,CAAP,IAAiB,EAAvC;AACA,OAFD;AAGA,KATD;AAUA;AAED;;;;;;;;;;;;;AAWA,QAAMgI,aAAN,CAAoBJ,OAApB,EAA6B;AAC5B,QAAI,KAAKpB,MAAL,CAAY/G,MAAZ,KAAuB,CAAvB,IAA4BmI,OAAO,CAACnI,MAAR,KAAmB,CAAnD,EAAsD;AACrD;AACA;;AACD,UAAM4J,GAAG,GAAG,sBAAKzB,OAAO,CAACvI,GAAR,CAAYmJ,CAAC,IAAIA,CAAC,CAACxI,EAAnB,CAAL,CAAZ;;AACA,SAAKwG,MAAL,CAAY3I,OAAZ,CAAoB,MAAMsL,IAAN,IAAc,CACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KApBD;AAqBA;AAED;;;;;;;AAKAI,EAAAA,OAAO,CAACC,WAAD,EAAc;AACpB,SAAK1G,QAAL,GAAgB,CAAC,GAAG,KAAKA,QAAT,EAAmB,GAAG0G,WAAtB,CAAhB;AACA,WAAO,IAAP;AACA;AAED;;;;;;;AAKApJ,EAAAA,MAAM,CAACqJ,UAAD,EAAa;AAClB,SAAK3G,QAAL,CAAc7E,IAAd,CAAmBwL,UAAnB;;AACA,WAAO,IAAP;AACA;AAED;;;;;;;AAKAC,EAAAA,MAAM,CAACC,gBAAD,EAAmB;AACxB,SAAKpE,QAAL,CAActH,IAAd,CAAmB0L,gBAAnB;;AACA,WAAO,IAAP;AACA;AAED;;;;;;;AAKA1K,EAAAA,KAAK,CAAC2K,SAAD,EAAY;AAChB,SAAKpE,OAAL,CAAavH,IAAb,CAAkB2L,SAAlB;;AACA,WAAO,IAAP;AACA;AAED;;;;;;;AAKAC,EAAAA,IAAI,CAACD,SAAD,EAAY;AACf,SAAKpE,OAAL,CAAavH,IAAb,CAAkB2L,SAAlB;;AACA,WAAO,IAAP;AACA;AAED;;;;;;;;AAMAlK,EAAAA,IAAI,CAACoK,UAAD,EAAa;AAChB,SAAKrE,MAAL,CAAYxH,IAAZ,CAAkB,cAAa6L,UAAW,EAA1C;;AACA,WAAO,IAAP;AACA;AAED;;;;;;;;AAMA9F,EAAAA,QAAQ,CAAC8F,UAAD,EAAa;AACpB,SAAKrE,MAAL,CAAYxH,IAAZ,CAAkB,aAAY6L,UAAW,EAAzC;;AACA,WAAO,IAAP;AACA;AAED;;;;;;;;AAMAzF,EAAAA,QAAQ,CAACyF,UAAD,EAAa;AACpB,SAAKrE,MAAL,CAAYxH,IAAZ,CAAkB,aAAY6L,UAAW,EAAzC;;AACA,WAAO,IAAP;AACA;AAED;;;;;;;;AAMA5F,EAAAA,SAAS,CAAC4F,UAAD,EAAa;AACrB,SAAKrE,MAAL,CAAYxH,IAAZ,CAAkB,cAAa6L,UAAW,EAA1C;;AACA,WAAO,IAAP;AACA;AAED;;;;;;;;AAMA1F,EAAAA,SAAS,CAAC0F,UAAD,EAAa;AACrB,SAAKrE,MAAL,CAAYxH,IAAZ,CAAkB,cAAa6L,UAAW,EAA1C;;AACA,WAAO,IAAP;AACA;AAED;;;;;;;;AAMA/F,EAAAA,SAAS,CAAC+F,UAAD,EAAa;AACrB,SAAKrE,MAAL,CAAYxH,IAAZ,CAAkB,cAAa6L,UAAW,EAA1C;;AACA,WAAO,IAAP;AACA;AAED;;;;;;;;AAMA7F,EAAAA,aAAa,CAAC6F,UAAD,EAAa;AACzB,SAAKrE,MAAL,CAAYxH,IAAZ,CAAkB,mBAAkB6L,UAAW,EAA/C;;AACA,WAAO,IAAP;AACA;AAED;;;;;;;;AAMAxF,EAAAA,aAAa,CAACwF,UAAD,EAAa;AACzB,SAAKrE,MAAL,CAAYxH,IAAZ,CAAkB,mBAAkB6L,UAAW,EAA/C;;AACA,WAAO,IAAP;AACA;AAED;;;;;;;;AAMA3F,EAAAA,cAAc,CAAC2F,UAAD,EAAa;AAC1B,SAAKrE,MAAL,CAAYxH,IAAZ,CAAkB,oBAAmB6L,UAAW,EAAhD;;AACA,WAAO,IAAP;AACA;AAED;;;;;;;AAKAC,EAAAA,MAAM,CAAC9K,KAAD,EAAQ;AACb,QAAI2C,KAAK,CAACC,OAAN,CAAc5C,KAAd,CAAJ,EAA0B;AACzBA,MAAAA,KAAK,CAACpB,OAAN,CAAcmM,CAAC,IAAI,KAAKD,MAAL,CAAYC,CAAZ,CAAnB;AACA,aAAO,IAAP;AACA;;AACD/K,IAAAA,KAAK,GAAG,sBAAaA,KAAb,CAAR;AACA,SAAKwG,MAAL,GAAc,KAAKA,MAAL,CAAYS,MAAZ,CAAmBxG,IAAI,IAAI;AACxC,YAAMuK,KAAK,GAAG,IAAIC,MAAJ,CAAY,kBAAiBjL,KAAM,KAAnC,CAAd;AACA,aAAO,CAACgL,KAAK,CAACE,IAAN,CAAWzK,IAAX,CAAR;AACA,KAHa,CAAd;AAIA,WAAO,IAAP;AACA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA0K,EAAAA,WAAW,CAACC,UAAD,EAAaC,QAAb,EAAuB;AACjC,QAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AACjCD,MAAAA,UAAU,CAACpM,IAAX,CAAgBqM,QAAhB;AACA,aAAO,IAAP;AACA;;AACD,UAAMC,OAAO,GAAGD,QAAQ,CAAC7K,MAAzB;AACA,QAAI,CAACW,MAAD,EAASkB,QAAT,EAAmBjB,KAAnB,IAA4BiK,QAAhC;;AACA,QAAI1I,KAAK,CAACC,OAAN,CAAczB,MAAd,CAAJ,EAA2B;AAC1BA,MAAAA,MAAM,CAACvC,OAAP,CAAeF,GAAG,IAAI;AACrB,aAAKyM,WAAL,CAAiBC,UAAjB,EAA6B,CAAC1M,GAAD,CAA7B;AACA,OAFD;AAGA,aAAO,IAAP;AACA,KALD,MAKO,IAAI,OAAOyC,MAAP,KAAkB,QAAtB,EAAgC;AACtC,4BAAOA,MAAP,EAAe,CAACzC,GAAD,EAAMD,IAAN,KAAe;AAC7B,aAAK0M,WAAL,CAAiBC,UAAjB,EAA6B,CAAC3M,IAAD,EAAOC,GAAP,CAA7B;AACA,OAFD;AAGA,aAAO,IAAP;AACA;;AACD,QAAI,QAAQwM,IAAR,CAAa/J,MAAb,CAAJ,EAA0B;AACzBA,MAAAA,MAAM,GAAGlE,eAAMqD,QAAN,CAAea,MAAf,CAAT;AACA;;AACD,QAAImK,OAAO,KAAK,CAAhB,EAAmB;AAClB;AACA;AACAF,MAAAA,UAAU,CAACpM,IAAX,CAAgBmC,MAAhB;AACA,aAAO,IAAP;AACA,KALD,MAKO,IACNmK,OAAO,KAAK,CAAZ,IACA3I,KAAK,CAACC,OAAN,CAAcP,QAAd,CADA,IAEAA,QAAQ,CAAC7B,MAAT,GAAkB,CAFlB,IAGA,qCAAYW,MAAZ,EAAoB,GAApB,MAA6BkB,QAAQ,CAAC7B,MAJhC,EAKL;AACD,YAAMiB,MAAM,GAAGY,QAAf;AACA,UAAIoB,CAAC,GAAG,CAAR;AACA,YAAM/F,GAAG,GAAGyD,MAAM,CAAC6B,OAAP,CAAe,YAAf,EAA6B,CAACC,EAAD,EAAKC,EAAL,EAASqI,EAAT,KAAgB;AACxD,cAAMC,WAAW,GAAG,KAAKrI,eAAL,CAAqB1B,MAAM,CAACgC,CAAC,EAAF,CAA3B,CAApB;AACA,eAAQ,IAAGP,EAAG,GAAEsI,WAAY,GAAED,EAAG,GAAjC;AACA,OAHW,CAAZ;AAIAH,MAAAA,UAAU,CAACpM,IAAX,CAAgBtB,GAAhB;AACA,aAAO,IAAP;AACA,KAdM,MAcA,IAAI4N,OAAO,KAAK,CAAhB,EAAmB;AACzB;AACA;AACA;AACAlK,MAAAA,KAAK,GAAGiB,QAAR;AACA,YAAMoJ,KAAK,GAAGtK,MAAM,CAACmB,KAAP,CAAa,GAAb,CAAd;AACAnB,MAAAA,MAAM,GAAGsK,KAAK,CAACC,KAAN,EAAT;AACArJ,MAAAA,QAAQ,GAAGoJ,KAAK,CAAChL,IAAN,CAAW,GAAX,CAAX;AACA;;AACD,QAAI,CAAC4B,QAAL,EAAe;AACdA,MAAAA,QAAQ,GAAG,GAAX;AACA;;AACDA,IAAAA,QAAQ,GAAGA,QAAQ,CAACmC,iBAAT,EAAX;AACA,UAAMmH,SAAS,GAAGtJ,QAAQ,CAACwC,KAAT,CAAe,0CAAf,CAAlB;;AACA,QAAIxC,QAAQ,KAAK,aAAb,IAA8BA,QAAQ,KAAK,SAA/C,EAA0D;AACzD;AACA,YAAMuI,IAAI,GAAG3N,eAAMwF,MAAN,CAAarB,KAAK,CAAC,CAAD,CAAlB,CAAb;;AACA,YAAMwK,EAAE,GAAG3O,eAAMwF,MAAN,CAAarB,KAAK,CAAC,CAAD,CAAlB,CAAX;;AACAgK,MAAAA,UAAU,CAACpM,IAAX,CAAiB,GAAEmC,MAAO,IAAGkB,QAAS,IAAGuI,IAAK,QAAOgB,EAAG,EAAxD;AACA,KALD,MAKO,IAAID,SAAJ,EAAe;AACrB,YAAME,SAAS,GAAG,KAAK1I,eAAL,CAAqB/B,KAArB,CAAlB;AACA,UAAI0K,MAAJ;;AACA,UAAIH,SAAS,CAAC,CAAD,CAAT,KAAiB,GAAjB,IAAwB,CAACA,SAAS,CAAC,CAAD,CAAtC,EAA2C;AAC1CG,QAAAA,MAAM,GAAI,IAAGD,SAAU,GAAvB;AACA,OAFD,MAEO,IAAIF,SAAS,CAAC,CAAD,CAAT,KAAiB,IAArB,EAA2B;AACjCG,QAAAA,MAAM,GAAI,IAAGD,SAAU,IAAvB;AACA,OAFM,MAEA,IAAIF,SAAS,CAAC,CAAD,CAAT,KAAiB,IAArB,EAA2B;AACjCG,QAAAA,MAAM,GAAI,KAAID,SAAU,GAAxB;AACA,OAFM,MAEA,IAAIF,SAAS,CAAC,CAAD,CAAT,KAAiB,KAArB,EAA4B;AAClCG,QAAAA,MAAM,GAAI,KAAID,SAAU,IAAxB;AACA;;AACDT,MAAAA,UAAU,CAACpM,IAAX,CAAiB,GAAEmC,MAAO,IAAGwK,SAAS,CAAC,CAAD,CAAI,IAAGG,MAAO,EAApD;AACA,KAbM,MAaA,IAAI1K,KAAK,KAAK,IAAd,EAAoB;AAC1BgK,MAAAA,UAAU,CAACpM,IAAX,CAAgBqD,QAAQ,KAAK,GAAb,GAAoB,GAAElB,MAAO,UAA7B,GAA0C,GAAEA,MAAO,cAAnE;AACA,KAFM,MAEA,IAAIwB,KAAK,CAACC,OAAN,CAAcxB,KAAd,CAAJ,EAA0B;AAChC;AACA,YAAM2K,MAAM,GAAG3K,KAAK,CAAChB,GAAN,CAAU4L,CAAC,IAAI/O,eAAMwF,MAAN,CAAauJ,CAAb,CAAf,CAAf;AACA,YAAMC,MAAM,GAAGF,MAAM,CAACtL,IAAP,CAAY,GAAZ,CAAf;AACA2K,MAAAA,UAAU,CAACpM,IAAX,CACCqD,QAAQ,KAAK,GAAb,IAAoBA,QAAQ,KAAK,IAAjC,GACI,GAAElB,MAAO,OAAM8K,MAAO,GAD1B,GAEI,GAAE9K,MAAO,WAAU8K,MAAO,GAH/B;AAKA,KATM,MASA,IAAI5J,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,QAAtC,EAAgD;AACtD;AACAjB,MAAAA,KAAK,GAAGnE,eAAMwF,MAAN,CAAarB,KAAb,CAAR;AACAgK,MAAAA,UAAU,CAACpM,IAAX,CAAiB,GAAEmC,MAAO,IAAGkB,QAAS,KAAIjB,KAAM,GAAhD;AACA,KAJM,MAIA;AACNA,MAAAA,KAAK,GAAGnE,eAAMwF,MAAN,CAAarB,KAAb,CAAR;AACAgK,MAAAA,UAAU,CAACpM,IAAX,CAAiB,GAAEmC,MAAO,IAAGkB,QAAS,IAAGjB,KAAM,EAA/C;AACA;;AACD,WAAO,IAAP;AACA;AAED;;;;;;;AAKA8K,EAAAA,OAAO,CAAC/K,MAAD,EAAS;AACf,SAAKuF,SAAL,CAAe1H,IAAf,CAAoBmC,MAApB;;AACA,WAAO,IAAP;AACA;AAED;;;;;;;;;AAOAW,EAAAA,KAAK,CAAC,GAAGgB,IAAJ,EAAU;AACd,SAAKqI,WAAL,CAAiB,KAAK1E,OAAtB,EAA+B3D,IAA/B;;AACA,WAAO,IAAP;AACA;AAED;;;;;;;;AAMAqJ,EAAAA,YAAY,CAAChL,MAAD,EAASiL,aAAT,EAAwB;AACnC,QAAIA,aAAa,CAAC,CAAD,CAAb,IAAoBA,aAAa,CAAC,CAAD,CAArC,EAA0C;AACzC,WAAKtK,KAAL,CAAWX,MAAX,EAAmB,SAAnB,EAA8BiL,aAA9B;AACA,KAFD,MAEO,IAAIA,aAAa,CAAC,CAAD,CAAjB,EAAsB;AAC5B,WAAKtK,KAAL,CAAWX,MAAX,EAAmB,IAAnB,EAAyBiL,aAAa,CAAC,CAAD,CAAtC;AACA,KAFM,MAEA,IAAIA,aAAa,CAAC5L,MAAd,GAAuB,CAA3B,EAA8B;AACpC,WAAKsB,KAAL,CAAWX,MAAX,EAAmB,IAAnB,EAAyBiL,aAAa,CAAC,CAAD,CAAtC;AACA;;AACD,WAAO,IAAP;AACA;AAED;;;;;;;AAKAC,EAAAA,OAAO,CAACC,UAAD,EAAa;AACnB,UAAMjB,QAAQ,GAAG,EAAjB;AACAiB,IAAAA,UAAU,CAAC1N,OAAX,CAAmB2N,SAAS,IAAI;AAC/B,WAAKpB,WAAL,CAAiBE,QAAjB,EAA2BkB,SAA3B;AACA,KAFD;AAGA,UAAMN,MAAM,GAAGZ,QAAQ,CAAC5K,IAAT,CAAc,MAAd,CAAf;;AACA,QAAIwL,MAAM,CAAC7I,KAAP,CAAa,CAAb,EAAgB,CAAhB,MAAuB,GAAvB,IAA8B6I,MAAM,CAAC7I,KAAP,CAAa,CAAC,CAAd,MAAqB,GAAvD,EAA4D;AAC3D,WAAKtB,KAAL,CAAWmK,MAAX;AACA,KAFD,MAEO;AACN,WAAKnK,KAAL,CAAY,IAAGmK,MAAO,GAAtB;AACA;;AACD,WAAO,IAAP;AACA;AAED;;;;;;;;;AAOAO,EAAAA,MAAM,CAAC,GAAG1J,IAAJ,EAAU;AACf,SAAKqI,WAAL,CAAiB,KAAKxE,QAAtB,EAAgC7D,IAAhC;;AACA,WAAO,IAAP;AACA;;AACD2J,EAAAA,QAAQ,CAACH,UAAD,EAAa;AACpB,UAAMjB,QAAQ,GAAG,EAAjB;AACAiB,IAAAA,UAAU,CAAC1N,OAAX,CAAmB2N,SAAS,IAAI;AAC/B,WAAKpB,WAAL,CAAiBE,QAAjB,EAA2BkB,SAA3B;AACA,KAFD;AAGA,UAAMN,MAAM,GAAGZ,QAAQ,CAAC5K,IAAT,CAAc,MAAd,CAAf;AACA,SAAK+L,MAAL,CAAa,IAAGP,MAAO,GAAvB;AACA,WAAO,IAAP;AACA;AAED;;;;;;;AAKAS,EAAAA,OAAO,CAACvL,MAAD,EAAS;AACf,SAAKyF,SAAL,CAAe5H,IAAf,CAAoBmC,MAAM,CAAC6B,OAAP,CAAe,QAAf,EAAyB,SAAzB,CAApB;;AACA,WAAO,IAAP;AACA;AAED;;;;;;;;;;;AASA2J,EAAAA,SAAS,CAACxL,MAAD,EAASyL,QAAQ,GAAG,EAApB,EAAwB;AAChC,UAAMC,SAAS,GAAG1L,MAAM,CAACiC,KAAP,CAAa,CAAb,EAAgB,CAAhB,MAAuB,GAAvB,GAA6B,MAA7B,GAAsC,KAAxD;AACAjC,IAAAA,MAAM,GAAGA,MAAM,CAAC6B,OAAP,CAAe,IAAf,EAAqB,EAArB,CAAT;AACA7B,IAAAA,MAAM,GAAGyL,QAAQ,CAACzL,MAAD,CAAR,IAAoBA,MAA7B;AACA,SAAKuL,OAAL,CAAc,GAAEvL,MAAO,IAAG0L,SAAU,EAApC;AACA,WAAO,IAAP;AACA;AAED;;;;;;;AAKA7K,EAAAA,KAAK,CAAC8K,GAAD,EAAM;AACV,SAAK/F,MAAL,GAAcgG,MAAM,CAACD,GAAD,CAAN,IAAe,CAA7B;AACA,WAAO,IAAP;AACA;AAED;;;;;;;AAKAhG,EAAAA,MAAM,CAACgG,GAAD,EAAM;AACX,SAAK9F,OAAL,GAAe+F,MAAM,CAACD,GAAD,CAAN,IAAe,CAA9B;AACA,WAAO,IAAP;AACA;AAED;;;;;;;AAKAE,EAAAA,IAAI,CAACF,GAAD,EAAM;AACT,SAAKjG,KAAL,GAAakG,MAAM,CAACD,GAAD,CAAN,IAAe,CAA5B;AACA,WAAO,IAAP;AACA;AAED;;;;;;;AAKArK,EAAAA,MAAM,CAACrB,KAAD,EAAQ;AACb,WAAOnE,eAAMwF,MAAN,CAAarB,KAAb,CAAP;AACA;AAED;;;;;;;AAKA+B,EAAAA,eAAe,CAAC/B,KAAD,EAAQ;AACtB,UAAM6L,OAAO,GAAGhQ,eAAMwF,MAAN,CAAarB,KAAb,CAAhB;;AACA,QAAI6L,OAAO,CAAC7J,KAAR,CAAc,CAAd,EAAiB,CAAjB,MAAwB,GAAxB,IAA+B6J,OAAO,CAAC7J,KAAR,CAAc,CAAC,CAAf,MAAsB,GAAzD,EAA8D;AAC7D,aAAO6J,OAAO,CAAC7J,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAlB,CAAP;AACA;;AACD,WAAOhC,KAAP;AACA;;AA18BkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbpB;;AACA;;AACA","file":"index.map","sourceRoot":"../src","sourcesContent":["import mysql from 'mysql';\n\n/**\n * Simple database class for mysql\n */\nexport class Db {\n\t/**\n\t * Connection options including host, login, password, encoding, database\n\t * @param {Object} config  Configuration object\n\t */\n\tconstructor(config = {}) {\n\t\tconst env =\n\t\t\ttypeof process === 'object' && typeof process.env === 'object'\n\t\t\t\t? process.env\n\t\t\t\t: {};\n\t\tthis.config = {\n\t\t\thost: config.hostname || env.DB_HOSTNAME || '127.0.0.1',\n\t\t\tuser: config.username || env.DB_USERNAME || 'root',\n\t\t\tpassword: config.password || env.DB_PASSWORD || '',\n\t\t\tdatabase: config.database || env.DB_DATABASE || 'platform',\n\t\t\tport: config.port || env.DB_PORT || 3306,\n\t\t\tencoding: config.encoding || env.DB_ENCODING || 'utf-8',\n\t\t};\n\t}\n\n\t/**\n\t * Create a new QuickDb instance or return the last used one\n\t * @param {Object} [config]  In the format required by mysql js\n\t * @return {Db}\n\t */\n\tstatic factory(config = {}) {\n\t\tif (!Db.instance) {\n\t\t\tDb.instance = new Db(config);\n\t\t}\n\t\treturn Db.instance;\n\t}\n\n\t/**\n\t * Make a new connection to MySQL\n\t */\n\tconnect() {\n\t\tthis.connection = mysql.createConnection(this.config);\n\t\tthis.connection.connect(err => {\n\t\t\tif (err && err.fatal) {\n\t\t\t\tthrow new Error(`[${err.code}] ${err.sqlMessage}`);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Make a new connection to MySQL if not already connected\n\t */\n\tconnectOnce() {\n\t\tif (!this.connection) {\n\t\t\tthis.connect();\n\t\t}\n\t}\n\n\t// /**\n\t//  * Run a list of semicolon-delimited queries\n\t//  * @see https://www.npmjs.com/package/mysql#multiple-statement-queries\n\t//  * @param {String} sql\n\t//  * @param int|string $bindVar1  The value to bind to the first question mark\n\t//  * @param int|string $bindVarN  The value to bind to the nth question mark\n\t//  * @return {Array}|bool\n\t//  */\n\t// multiQuery(/*$sql, $bindVar1, $bindVarN*/) {\n\t// \tif (!$this->_connectOnce()) {\n\t// \t\treturn false;\n\t// \t}\n\t// \t$sql = $this->bindArgs(func_get_args());\n\t// \t$ok = mysqli_multi_query($this->_dbh, $sql);\n\t// \tif (!$ok) {\n\t// \t\treturn false;\n\t// \t}\n\t// \t$fetch = \"mysqli_fetch_$this->fetchMode\";\n\t// \t$resultSets = [];\n\t// \twhile(1) {\n\t// \t\t/* get first result set */\n\t// \t\t$resultSet = [];\n\t// \t\tif (($result = mysqli_store_result($this->_dbh))) {\n\t// \t\t\twhile (($row = $fetch($result))) {\n\t// \t\t\t\t$resultSet[] = $row;\n\t// \t\t\t}\n\t// \t\t\tmysqli_free_result($result);\n\t// \t\t}\n\t// \t\t$resultSets[] = $resultSet;\n\t// \t\tif (!mysqli_next_result($this->_dbh)) {\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t}\n\t// \treturn $resultSets;\n\t// }\n\n\t/**\n\t * Return result rows for the given SELECT statement\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Object[]>}\n\t */\n\tselect(sql, ...bindVars) {\n\t\tthis.connectOnce();\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastQuery = this.connection.query(\n\t\t\t\toptions,\n\t\t\t\t(error, results, fields) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.lastFields = fields;\n\t\t\t\t\t\tresolve(results);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Return result array as col1 => col2 pairs for the given SELECT statement\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Object>}\n\t */\n\tselectHash(sql, ...bindVars) {\n\t\tthis.connectOnce();\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastQuery = this.connection.query(\n\t\t\t\toptions,\n\t\t\t\tbindVars,\n\t\t\t\t(error, results, fields) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.lastFields = fields;\n\t\t\t\t\t\tconst key = fields[0].name;\n\t\t\t\t\t\tconst val = fields[1].name;\n\t\t\t\t\t\tconst hash = {};\n\t\t\t\t\t\tresults.forEach(result => {\n\t\t\t\t\t\t\thash[result[key]] = result[val];\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresolve(hash);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Return result array as col1 => col2 pairs for the given SELECT statement\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Object>}\n\t */\n\tselectList(sql, ...bindVars) {\n\t\tthis.connectOnce();\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastQuery = this.connection.query(\n\t\t\t\toptions,\n\t\t\t\t(error, results, fields) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.lastFields = fields;\n\t\t\t\t\t\tconst name = fields[0].name;\n\t\t\t\t\t\tconst list = [];\n\t\t\t\t\t\tresults.forEach(result => list.push(result[name]));\n\t\t\t\t\t\tresolve(list);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Return records all grouped by one of the column's values\n\t * @param {String} groupField  The name of the field to group by\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Array>}\n\t */\n\tselectGrouped(groupField, sql, ...bindVars) {\n\t\tthis.connectOnce();\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastQuery = this.connection.query(\n\t\t\t\toptions,\n\t\t\t\t(error, results, fields) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.lastFields = fields;\n\t\t\t\t\t\tconst hash = {};\n\t\t\t\t\t\tresults.forEach(result => {\n\t\t\t\t\t\t\tif (!hash[result[groupField]]) {\n\t\t\t\t\t\t\t\thash[result[groupField]] = [];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thash[result[groupField]].push(result);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresolve(hash);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Return records all indexed by one of the column's values\n\t * @param {String} indexField  The name of the field to index by\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Array>}\n\t */\n\tselectIndexed(indexField, sql, ...bindVars) {\n\t\tthis.connectOnce();\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastQuery = this.connection.query(\n\t\t\t\toptions,\n\t\t\t\t(error, results, fields) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.lastFields = fields;\n\t\t\t\t\t\tconst hash = {};\n\t\t\t\t\t\tresults.forEach(result => {\n\t\t\t\t\t\t\thash[result[indexField]] = result;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresolve(hash);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Return first result row for the given SELECT statement\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Object>}\n\t */\n\tselectFirst(sql, ...bindVars) {\n\t\tthis.connectOnce();\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastQuery = this.connection.query(\n\t\t\t\toptions,\n\t\t\t\t(error, results, fields) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.lastFields = fields;\n\t\t\t\t\t\tresolve(results[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Return first column value for the first result row for the given SELECT statement\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Number|String>}\n\t */\n\tselectValue(sql, ...bindVars) {\n\t\tthis.connectOnce();\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastQuery = this.connection.query(\n\t\t\t\toptions,\n\t\t\t\t(error, results, fields) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.lastFields = fields;\n\t\t\t\t\t\tconst name = fields[0].name;\n\t\t\t\t\t\tresolve(results[0][name]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Run the given SELECT statement wrapped in a SELECT EXISTS query\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Boolean>}  True if it exists, false otherwise\n\t */\n\tselectExists(sql, ...bindVars) {\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\toptions.sql = `SELECT EXISTS (${options.sql}) AS does_it_exist`;\n\t\treturn this.selectValue(options).then(Boolean);\n\t}\n\n\t/**\n\t * Run the given INSERT statement\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Number>}  The id of the last inserted record\n\t */\n\tinsert(sql, ...bindVars) {\n\t\tthis.connectOnce();\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastQuery = this.connection.query(options, (error, results) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(results.insertId);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Run the given UPDATE statement\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Number>}  The number of rows affected by the statement\n\t */\n\tupdate(sql, ...bindVars) {\n\t\tthis.connectOnce();\n\t\tconst options = this.bindArgs(sql, bindVars);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.lastQuery = this.connection.query(options, (error, results) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(results.changedRows);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Run the given DELETE statement\n\t * @param {String} sql  The SQL to run\n\t * @param {...*} bindVars  The values to bind to the each question mark or named binding\n\t * @return {Promise<Array>}\n\t */\n\tdelete(sql, ...bindVars) {\n\t\treturn this.update(sql, ...bindVars);\n\t}\n\n\t/**\n\t * Build a SELECT statement and return result rows\n\t * @param {String} table  The name of the table\n\t * @param {Array} fields  An array of field names to select\n\t * @param {Object} params  Params to construct the WHERE clause\n\t * @param {String} extra  Additional raw SQL such as GROUP BY, ORDER BY, or LIMIT\n\t * @return {Promise<Array>}  The result rows\n\t */\n\tselectFrom(table, fields = [], params = {}, extra = '') {\n\t\tthis.connectOnce();\n\t\tconst escFields = fields.map(field => mysql.escapeId(field));\n\t\tconst escFieldsString = fields.length ? escFields.join(', ') : '*';\n\t\tconst escTable = mysql.escapeId(table);\n\t\tconst escWhere = this.buildWheres(params) || '1';\n\t\tconst sql = `SELECT ${escFieldsString} FROM ${escTable} WHERE ${escWhere} ${extra}`.trim();\n\t\treturn this.select(sql);\n\t}\n\n\t/**\n\t * Select the record with the given id\n\t * @param {String} table  The name of the table from which to select\n\t * @param {String} id  The value of the id column\n\t * @return {Promise<Number>}\n\t */\n\tselectId(table, id) {\n\t\treturn this.selectRecordByKey(table, 'id', id);\n\t}\n\n\t/**\n\t * Select the record with the given UUID\n\t * @param {String} table  The name of the table from which to select\n\t * @param {String} uuid  The value of the uuid column\n\t * @return {Promise<String>}\n\t */\n\tselectUuid(table, uuid) {\n\t\treturn this.selectRecordByKey(table, 'uuid', uuid);\n\t}\n\n\t/**\n\t * Select the record with the given UUID\n\t * @param {String} table  The name of the table from which to select\n\t * @param {String} column  The name of the column from which to select\n\t * @param {String} value  The value of the record for that column\n\t * @return {Promise<Object>}\n\t */\n\tselectRecordByKey(table, column, value) {\n\t\tconst escTable = mysql.escapeId(table);\n\t\tconst escColumn = mysql.escapeId(column);\n\t\treturn this.selectFirst(\n\t\t\t`SELECT * FROM ${escTable} WHERE ${escColumn} = ?`,\n\t\t\tvalue\n\t\t);\n\t}\n\n\t/**\n\t * Find a record or add a new one\n\t * @param {String} table  The name of the table from which to select\n\t * @param {String} column  The name of the column from which to select\n\t * @param {String} value  The value of the record for that column\n\t * @param {Object} newValues  The values to use to insert if the record doesn't exist\n\t * @return {Promise<Number>}  The existing id or the new id\n\t */\n\tfindIdOrCreate(table, column, value, newValues = {}) {\n\t\tconst escTable = mysql.escapeId(table);\n\t\tconst escColumn = mysql.escapeId(column);\n\t\treturn this.selectFirst(\n\t\t\t`SELECT id FROM ${escTable} WHERE ${escColumn} = ?`,\n\t\t\tvalue\n\t\t).then(id => {\n\t\t\tif (id) {\n\t\t\t\treturn id;\n\t\t\t}\n\t\t\treturn this.insertInto(table, { [column]: value, ...newValues });\n\t\t});\n\t}\n\n\t/**\n\t * Build an INSERT statement and run it\n\t * @param {String} table  The name of the table\n\t * @param {Object} values  column-value pairs to insert\n\t * @return {Promise<Number>}  Id of the last inserted record\n\t */\n\tinsertInto(table, values) {\n\t\tthis.connectOnce();\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst escTable = mysql.escapeId(table);\n\t\t\t// see https://www.npmjs.com/package/mysql#escaping-query-values\n\t\t\tconst sql = `INSERT INTO ${escTable} SET ?`;\n\t\t\tthis.lastQuery = this.connection.query(sql, values, error => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tthis.connection.query(\n\t\t\t\t\t\t'SELECT LAST_INSERT_ID() AS id',\n\t\t\t\t\t\t(insertError, insertResults) => {\n\t\t\t\t\t\t\tif (insertError) {\n\t\t\t\t\t\t\t\treject(insertError);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresolve(insertResults[0].id);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Build an UPDATE statement and run it\n\t * @param {String} table  The name of the table\n\t * @param {Object} set  An array of column => value pairs to update\n\t * @param {Object} where  Params to construct the WHERE clause\n\t * @return {Promise<Number>}  Number of rows affected\n\t */\n\tupdateTable(table, set, where = {}) {\n\t\tthis.connectOnce();\n\t\tconst escTable = mysql.escapeId(table);\n\t\tconst escWhere = this.buildWheres(where);\n\t\tconst sql = `UPDATE ${escTable} SET ? WHERE ${escWhere}`;\n\t\treturn this.select(sql, set);\n\t}\n\n\t/**\n\t * Construct a delete query and run\n\t * @param {String} table  The name of the table from which to delete\n\t * @param {Object} where  WHERE conditions on which to delete\n\t * @param {Number} limit  Limit deletion to this many records\n\t * @return {Promise<Number>}  Number of affected rows\n\t */\n\tdeleteFrom(table, where, limit = null) {\n\t\tthis.connectOnce();\n\t\tconst escTable = mysql.escapeId(table);\n\t\tconst escWhere = this.buildWheres(where);\n\t\tlet sql = `DELETE FROM ${escTable} WHERE ${escWhere}`;\n\t\tif (limit > 0) {\n\t\t\tsql = `${sql}LIMIT ${limit}`;\n\t\t}\n\t\treturn this.delete(sql);\n\t}\n\n\t/**\n\t * Build a where clause from an object of field-value pairs\n\t * @param {Object} wheres  An object with field-value pairs (field may be field space operator)\n\t * @return {String}\n\t */\n\tbuildWheres(wheres) {\n\t\tconst clauses = [];\n\t\tfor (const field in wheres) {\n\t\t\tif (!wheres.hasOwnProperty(field)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tclauses.push(this.buildWhere(field, wheres[field]));\n\t\t}\n\t\treturn clauses.length ? clauses.join(' AND ') : '1';\n\t}\n\n\t/**\n\t * Construct where clause element from the given field and value\n\t * @param {String} field  The field or field space operator\n\t * @param {*} value  The value to bind\n\t * @return {String}\n\t * @example\n\t * db.buildWhere('start_date BETWEEN', array('2012-01-01','2013-01-01'));\n\t * db.buildWhere('start_date >', '2013-01-01');\n\t * db.buildWhere('start_date !=', '2013-01-01');\n\t * db.buildWhere('start_date', null); // `start_date` IS NULL\n\t * db.buildWhere('start_date !=', null); // `start_date` IS NOT NULL\n\t * db.buildWhere('id', array(1,2,3)); // id IN (1,2,3)\n\t * db.buildWhere('id !=', array(1,2,3)); // id NOT IN (1,2,3)\n\t */\n\tbuildWhere(field, value) {\n\t\tlet [name, operator] = field.split(' ');\n\t\tname = mysql.escapeId(name);\n\t\toperator = operator ? operator.toUpperCase() : '=';\n\t\tif (operator === 'BETWEEN') {\n\t\t\tconst val0 = mysql.escape(value[0]);\n\t\t\tconst val1 = mysql.escape(value[1]);\n\t\t\treturn `${name} BETWEEN ${val0} AND ${val1}`;\n\t\t} else if (value === null) {\n\t\t\treturn operator === '=' ? `${name} IS NULL` : `${name} IS NOT NULL`;\n\t\t} else if (Array.isArray(value)) {\n\t\t\tconst values = value.map(val => mysql.escape(val));\n\t\t\treturn operator === '=' || operator === 'IN'\n\t\t\t\t? `${name} IN(${values})`\n\t\t\t\t: `${name} NOT IN(${values})`;\n\t\t}\n\t\tconst escVal = mysql.escape(value);\n\t\treturn `${name} ${operator} ${escVal}`;\n\t}\n\n\t/**\n\t * Bind an array of arguments to a query\n\t * @param {String} sql  The base SQL query\n\t * @param {Array} args  An array of values to bind\n\t * @return {String}\n\t * @example\n\t * db.select('SELECT * FROM users WHERE id = ?', 100);\n\t * db.bindArgs(array('SELECT * FROM users WHERE id = ?', 100)); // SELECT * FROM users WHERE id = '100'\n\t * db.select('SELECT * FROM users WHERE id = :id', array('id'=>100));\n\t * db.bindArgs(array('SELECT * FROM users WHERE id = :id', array('id'=>100))); // SELECT * FROM users WHERE id = '100'\n\t */\n\tbindArgs(sql, args) {\n\t\tconst options = typeof sql == 'object' ? sql : { sql };\n\t\tif (typeof options.sql !== 'string') {\n\t\t\toptions.sql = '';\n\t\t}\n\t\tif (!Array.isArray(args)) {\n\t\t\treturn options;\n\t\t}\n\t\targs.forEach(arg => {\n\t\t\tif (arg && typeof arg === 'object' && !Array.isArray(arg)) {\n\t\t\t\toptions.sql = options.sql.replace(/:([\\w_]+)/g, ($0, $1) => {\n\t\t\t\t\tif (arg.hasOwnProperty($1)) {\n\t\t\t\t\t\treturn mysql.escape(arg[$1]);\n\t\t\t\t\t}\n\t\t\t\t\treturn $0;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\toptions.sql = options.sql.replace('?', mysql.escape(arg));\n\t\t\t}\n\t\t});\n\t\treturn options;\n\t}\n\n\t/**\n\t * Escape a value for use in a raw query and surround with apostrophes\n\t * @param {*} value  The value to escape\n\t * @return {String}\n\t */\n\tescape(value) {\n\t\treturn mysql.escape(value);\n\t}\n\n\t/**\n\t * Escape a value for use in a raw query without apostrophes\n\t * @param {*} value  The value to escape\n\t * @return {String}\n\t */\n\tescapeQuoteless(value) {\n\t\treturn mysql.escape(value).slice(1, -1);\n\t}\n}\n","import capitalize from 'lodash.capitalize';\nimport trim from 'lodash.trim';\n\n/**\n * Parse SQL and populate onto a Select query object\n */\nexport class Parser {\n\t/**\n\t * Create a new instance\n\t * @param {Select} query  A Select object on which to build parsed conditions\n\t */\n\tconstructor(query) {\n\t\tthis.query = query;\n\t}\n\n\t/**\n\t * Strip single-line and multi-line comment blocks\n\t * @param {String} sql  The SQL string\n\t * @return {String}\n\t */\n\t_stripComments(sql) {\n\t\t// multiline comments\n\t\tsql = sql.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\n\t\t// single line comments\n\t\tsql = sql.replace(/--([\\r\\n]|\\s+[^\\r\\n]+[\\r\\n])/g, '');\n\t\treturn sql;\n\t}\n\n\t/**\n\t * Before splitting into SQL clauses, extract some regex-able subqueries\n\t * @param {String} sql  The unparsed sql string\n\t * @return {Object}  An array with new sql and subqueries\n\t */\n\t_extractSubqueries(sql) {\n\t\tconst subqueries = {};\n\t\tlet i = 0;\n\t\tconst extractor = $0 => {\n\t\t\tconst placeholder = `'%SUBQUERY_${i++}'`;\n\t\t\tsubqueries[placeholder] = $0;\n\t\t\treturn placeholder;\n\t\t};\n\t\t// subselect in FROM clause\n\t\tsql = sql.replace(/(s*SELECTs+.+)s+ASs+[^s,]+/, extractor);\n\t\t// IF() in FROM clause\n\t\tsql = sql.replace(/IF(.+)s+ASs+[^s,]+/, extractor);\n\t\treturn { sql, subqueries };\n\t}\n\n\t/**\n\t * Inject column subqueries back into this object\n\t * @param {Array} subqueries  The list of extracted subqueries\n\t */\n\t_injectSubqueries(subqueries) {\n\t\tthis.query._columns = this.query._columns.map(col => {\n\t\t\treturn subqueries[col] || col;\n\t\t});\n\t}\n\n\t/**\n\t * Split SQL into clauses (used by ::parse())\n\t * @param {String} sql  The SQL to split\n\t * @return {String[]}\n\t */\n\t_split(sql) {\n\t\tconst splitter = /\\b(SELECT| TOP \\d+| SQL_CALC_FOUND_ROWS|FROM|(?:INNER |LEFT OUTER |RIGHT OUTER |LEFT |RIGHT |CROSS |FULL |FULL OUTER )JOIN|WHERE|GROUP BY|HAVING|ORDER BY|LIMIT|OFFSET)\\b/i;\n\t\treturn sql.split(splitter);\n\t}\n\n\t/**\n\t * Get a QuickSelect object representing the given SQL SELECT statement\n\t * @param {String} rawSql  The raw SQL for the SELECT statement\n\t * @return {Boolean}\n\t */\n\tparse(rawSql) {\n\t\tconst stripped = this._stripComments(rawSql);\n\t\tlet { sql, subqueries } = this._extractSubqueries(stripped);\n\t\tlet exprs = this._split(sql);\n\t\tlet expr;\n\t\tfor (let i = 0, len = exprs.length; i < len; i++) {\n\t\t\texpr = exprs[i].trim();\n\t\t\tlet upper = expr.toLocaleUpperCase();\n\t\t\tif (upper === 'SELECT') {\n\t\t\t\ti++;\n\t\t\t\texpr = exprs[i];\n\t\t\t\tupper = expr.toLocaleUpperCase();\n\t\t\t\tif (upper === 'SQL_CALC_FOUND_ROWS' || upper.slice(0, 3) === 'TOP') {\n\t\t\t\t\tthis.query.options(expr);\n\t\t\t\t\ti++;\n\t\t\t\t\texpr = exprs[i];\n\t\t\t\t}\n\t\t\t\tlet fragments = expr.split(/s*,s*/);\n\t\t\t\t// now handle parenthesis expressions that contain commas\n\t\t\t\tlet buffer = '';\n\t\t\t\tfragments.forEach(fragment => {\n\t\t\t\t\tif (buffer.length) {\n\t\t\t\t\t\t// we are in the middle of an expression containing parenthesis\n\t\t\t\t\t\tbuffer += fragment + ',';\n\t\t\t\t\t\tif (fragment.indexOf(')') > 0) {\n\t\t\t\t\t\t\t// we have an end parenthesis\n\t\t\t\t\t\t\tbuffer = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (fragment.match(/\\([^)]+$/)) {\n\t\t\t\t\t\tbuffer = fragment + ',';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst column = subqueries[fragment] || fragment;\n\t\t\t\t\t\tthis.query.column(column.trim());\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (upper === 'FROM') {\n\t\t\t\ti++;\n\t\t\t\texpr = exprs[i].trim();\n\t\t\t\texpr.split(/\\s*,\\s*/).forEach(table => this.query.table(table));\n\t\t\t} else if (upper.slice(-4) === 'JOIN') {\n\t\t\t\ti++;\n\t\t\t\texpr = exprs[i];\n\t\t\t\tswitch (upper) {\n\t\t\t\t\tcase 'JOIN':\n\t\t\t\t\tcase 'INNER JOIN':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.query.innerJoin(expr);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'LEFT JOIN':\n\t\t\t\t\t\tthis.query.leftJoin(expr);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'LEFT OUTER JOIN':\n\t\t\t\t\t\tthis.query.leftOuterJoin(expr);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'RIGHT JOIN':\n\t\t\t\t\t\tthis.query.rightJoin(expr);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'RIGHT OUTER JOIN':\n\t\t\t\t\t\tthis.query.rightOuterJoin(expr);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'CROSS JOIN':\n\t\t\t\t\t\tthis.query.crossJoin(expr);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'FULL JOIN':\n\t\t\t\t\t\tthis.query.fullJoin(expr);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'FULL OUTER JOIN':\n\t\t\t\t\t\tthis.query.fullOuterJoin(expr);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (upper === 'WHERE' || upper === 'HAVING') {\n\t\t\t\tthis.handleConditions(upper, exprs[++i]);\n\t\t\t} else if (upper === 'GROUP BY' || upper === 'ORDER BY') {\n\t\t\t\ti++;\n\t\t\t\tlet fn = upper.slice(0, 5).toLowerCase() + 'By';\n\t\t\t\texpr = exprs[i].trim();\n\t\t\t\texpr.split(/\\s*,\\s*/).forEach(this.query[fn].bind(this.query));\n\t\t\t} else if (upper === 'LIMIT' || upper === 'OFFSET') {\n\t\t\t\ti++;\n\t\t\t\tlet fn = upper.toLowerCase();\n\t\t\t\texpr = exprs[i].trim();\n\t\t\t\tthis.query[fn](expr);\n\t\t\t}\n\t\t}\n\t\tthis._injectSubqueries(subqueries);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Build a conditions list\n\t * @param {String} type  Either WHERE or HAVING\n\t * @param {String} clause  The expressions following the type keyword\n\t */\n\t// handleConditions(type, clause) {\n\t// \tconst chunks = clause.split(/\\bOR\\b/i);\n\t// \tconst conditions = chunks.map(chunk => chunk.split(/\\bAND\\b/i).map(trim));\n\t// \tif (chunks.length === 1) {\n\t// \t\t// no OR operators\n\t// \t\tconst fn = type.toLowerCase(); // either where or having\n\t// \t\tconditions[0].forEach(condition => this.query[fn](condition));\n\t// \t} else {\n\t// \t\t// some OR operators\n\t// \t\tconst orFn = 'or' + capitalize(type); // either orWhere or orHaving\n\t// \t\tthis.query[orFn](conditions);\n\t// \t}\n\t// }\n\thandleConditions(type, clause) {\n\t\tconst andGroups = clause.split(/\\bAND\\b/i);\n\t\tandGroups.forEach(andGroup => {\n\t\t\tconst orPieces = andGroup.split(/\\bOR\\b/i).map(trim);\n\t\t\tif (orPieces.length === 1) {\n\t\t\t\t// no OR operators\n\t\t\t\tconst fn = type.toLowerCase(); // either where or having\n\t\t\t\tthis.query[fn](orPieces[0]);\n\t\t\t} else {\n\t\t\t\t// some OR operators\n\t\t\t\tconst orFn = 'or' + capitalize(type); // either orWhere or orHaving\n\t\t\t\tthis.query[orFn](orPieces);\n\t\t\t}\n\t\t});\n\t}\n}\n","import { Parser } from '../Parser/Parser.js';\nimport { Db } from '../Db/Db.js';\nimport cloneDeep from 'lodash.clonedeep';\nimport escapeRegExp from 'lodash.escaperegexp';\nimport forOwn from 'lodash.forown';\nimport uniq from 'lodash.uniq';\nimport substrCount from 'quickly-count-substrings';\nimport mysql from 'mysql';\n\n/**\n * Build a select query\n * Class QuickSelect\n */\nexport class Select {\n\tparse(sql) {\n\t\tthis.reset();\n\t\tconst parser = new Parser(this);\n\t\tparser.parse(sql);\n\t\treturn this;\n\t}\n\n\tstatic parse(sql) {\n\t\treturn Select.init(Db.factory()).parse(sql);\n\t}\n\n\t/**\n\t * QuickSelect constructor\n\t */\n\tconstructor(Db) {\n\t\tthis.Db = Db;\n\t\tthis.reset();\n\t}\n\n\t/**\n\t * Shortcut to initialize without the `new` keyword\n\t * @return {Select}\n\t */\n\tstatic init(Db) {\n\t\treturn new Select(Db);\n\t}\n\n\t/**\n\t * Get the SQL as a pretty-printed string\n\t * @return {String}\n\t */\n\ttoString() {\n\t\tconst lines = [\n\t\t\t'SELECT',\n\t\t\tthis._options.length ? `  ${this._options.join('\\n  ')}` : null,\n\t\t\tthis._columns.length ? `  ${this._columns.join(',\\n  ')}` : '  *\\n',\n\t\t\t`FROM ${this._tables.join(', ')}`,\n\t\t\tthis._joins.length ? this._joins.join('\\n') : null,\n\t\t\tthis._wheres.length ? `WHERE ${this._wheres.join('\\n  AND ')}` : null,\n\t\t\tthis._groupBys.length ? `GROUP BY ${this._groupBys.join(',\\n  ')}` : null,\n\t\t\tthis._havings.length ? `HAVING ${this._havings.join('\\n  AND ')}` : null,\n\t\t\tthis._orderBys.length ? `ORDER BY ${this._orderBys.join(',\\n  ')}` : null,\n\t\t];\n\t\tif (this._page > 0) {\n\t\t\tconst offset = (this._page - 1) * this._limit;\n\t\t\tlines.push(`LIMIT ${this._limit}`);\n\t\t\tlines.push(`OFFSET ${offset}`);\n\t\t} else {\n\t\t\tif (this._limit > 0) {\n\t\t\t\tlines.push(`LIMIT ${this._limit}`);\n\t\t\t}\n\t\t\tif (this._offset > 0) {\n\t\t\t\tlines.push(`OFFSET ${this._offset}`);\n\t\t\t}\n\t\t}\n\n\t\treturn lines\n\t\t\t.filter(Boolean)\n\t\t\t.join('\\n')\n\t\t\t.trim();\n\t}\n\n\t/**\n\t * Get the SQL as a one-line string\n\t * @return {String}\n\t */\n\tnormalized() {\n\t\tconst lines = [\n\t\t\t'SELECT',\n\t\t\tthis._options.length ? this._options.join(' ') : null,\n\t\t\tthis._columns.length ? this._columns.join(', ') : ' * ',\n\t\t\t`FROM ${this._tables.join(', ')} `,\n\t\t\tthis._joins.length ? this._joins.join(' ') : null,\n\t\t\tthis._wheres.length ? `WHERE ${this._wheres.join(' AND ')}` : null,\n\t\t\tthis._groupBys.length ? `GROUP BY ${this._groupBys.join(', ')}` : null,\n\t\t\tthis._havings.length ? `HAVING ${this._havings.join(' AND ')}` : null,\n\t\t\tthis._orderBys.length ? `ORDER BY ${this._orderBys.join(', ')}` : null,\n\t\t];\n\n\t\tif (this._page > 0) {\n\t\t\tconst offset = (this._page - 1) * this._limit;\n\t\t\tlines.push(`LIMIT ${this._limit}`);\n\t\t\tlines.push(`OFFSET ${offset}`);\n\t\t} else {\n\t\t\tif (this._limit > 0) {\n\t\t\t\tlines.push(`LIMIT ${this._limit}`);\n\t\t\t}\n\t\t\tif (this._offset > 0) {\n\t\t\t\tlines.push(`OFFSET ${this._offset}`);\n\t\t\t}\n\t\t}\n\n\t\treturn lines\n\t\t\t.filter(Boolean)\n\t\t\t.join(' ')\n\t\t\t.trim();\n\t}\n\n\t/**\n\t * @param {String|Array} [field]  If given, reset the given component(s), otherwise reset all query components\n\t *     Valid components: option, column, table, where, orWhere, having, groupBy, orderBy, limit, offset, page\n\t * @return {Select}\n\t */\n\treset(field = null) {\n\t\tif (Array.isArray(field)) {\n\t\t\tfield.forEach(name => this.reset(name));\n\t\t\treturn this;\n\t\t}\n\t\tif (field) {\n\t\t\tlet prop = '_' + field.replace(/s$/, '');\n\t\t\tif (\n\t\t\t\t['option', 'column', 'table', 'where', 'having', 'groupBy', 'orderBy'].indexOf(field) > -1\n\t\t\t) {\n\t\t\t\tprop += 's';\n\t\t\t}\n\t\t\tthis[prop] = ['limit', 'offset', 'page'].indexOf(field) > -1 ? null : [];\n\t\t} else {\n\t\t\tthis._hasOne = [];\n\t\t\tthis._belongsTo = [];\n\t\t\tthis._hasMany = [];\n\t\t\tthis._habtm = [];\n\t\t\tthis._options = [];\n\t\t\tthis._columns = [];\n\t\t\tthis._tables = [];\n\t\t\tthis._joins = [];\n\t\t\tthis._wheres = [];\n\t\t\tthis._havings = [];\n\t\t\tthis._groupBys = [];\n\t\t\tthis._orderBys = [];\n\t\t\tthis._limit = null;\n\t\t\tthis._offset = null;\n\t\t\tthis._page = null;\n\t\t\tthis._bound = [];\n\t\t}\n\t\treturn this;\n\t}\n\n\t// \t\t/**\n\t// \t\t * Internal function for defining a relationship for fetching dependent or related tate\n\t// \t\t * @param {String} type  One of hasOne, hasMany, habtm\n\t// \t\t * @param array $spec  The specification for the relationship\n\t// \t\t * @return {Select}\n\t// \t\t */\n\t// \t\trelate($type, $spec) {\n\t// \t\t\tif ($type == 'habtm' || $type == 'hasAndBelongsToMany') {\n\t// \t\t\t\tthis.relationships[] = [\n\t// \t\t\t\t\t'key' => $spec['thisProperty'],\n\t// \t\t\t\t\t'type' => 'habtm',\n\t// \t\t\t\t\t'thisProperty' => @$spec['key'] ?: $spec['thisProperty'],\n\t// \t\t\t\t\t'options' => $spec\n\t// \t\t\t];\n\t// \t\t\t}\n\t// \t\t\telseif ($type == 'hasOne') {\n\t// \t\t\t\t$spec['key'] = @$spec['key'] ?: preg_replace('/^\\S+ as (\\S+)$/i', '$1', $spec['thisProperty']);\n\t// \t\t\t\t$spec['type'] = 'hasOne';\n\t// \t\t\t\tthis.relationships[] = $spec;\n\t// \t\t\t}\n\t// \t\telse {\n\t// \t\t\t\t$spec['key'] = @$spec['key'] ?: $spec['thisProperty'];\n\t// \t\t\t\t$spec['type'] = $type;\n\t// \t\t\t\tthis.relationships[] = $spec;\n\t// \t\t\t}\n\t// \t\t\treturn this;\n\t// \t\t}\n\t//\n\t// \t\t/**\n\t// \t\t * Specify to fetch dependent data of the given type\n\t// \t\t * @param {String} key  The name of the relationship as previously defined\n\t// \t\t * @return {Select}\n\t// \t\t */\n\t// \t\tcontain($key) {\n\t// \t\t\tif ($key == 'ALL') {\n\t// \t\t\t\tforeach (this.relationships as $rel) {\n\t// \t\t\t\t\tthis.{'_' . $rel['type']}[] = $rel;\n\t// \t\t\t\t}\n\t// \t\t\t\treturn this;\n\t// \t\t\t}\n\t// \t\t\tforeach (this.relationships as $rel) {\n\t// \t\t\t\tif ($key == $rel['key']) {\n\t// \t\t\t\t\tthis.{'_' . $rel['type']}[] = $rel;\n\t// \t\t\t\t\treturn this;\n\t// \t\t\t\t}\n\t// \t\t\t}\n\t// //\t\tQuickLogger::write('hasOne', pprt($key, this.relationships));\n\t// \t\t\ttrigger_error(\"Unknown contain key `$key`\", E_USER_WARNING);\n\t// \t\t\treturn this;\n\t// \t\t}\n\t//\n\thasOne(thisProperty, thatTableAndColumn) {\n\t\tthis._hasOne.push({ thisProperty, thatTableAndColumn });\n\t\treturn this;\n\t}\n\n\tbelongsTo(thisProperty, thatTableAndColumn) {\n\t\tthis._belongsTo.push({ thisProperty, thatTableAndColumn });\n\t\treturn this;\n\t}\n\n\thasMany(thisProperty, thatTableAndColumn) {\n\t\tthis._hasMany.push({ thisProperty, thatTableAndColumn });\n\t\treturn this;\n\t}\n\n\thabtm(thisProperty, idsColumn, join) {\n\t\tconst matchJoinFirst = join.match(/(?:LEFT JOIN\\s*)?(.+)\\s+ON\\s+\\1\\.id\\s*=\\s*(.+)\\.(.+)/);\n\t\tconst matchJoinSecond = join.match(/(?:LEFT JOIN\\s*)?(.+)\\s+ON\\s+(.+)\\.(.+)\\s*=\\s*\\1\\.id/);\n\t\tif (!matchJoinFirst && !matchJoinSecond) {\n\t\t\tthrow new Error(\n\t\t\t\t`Select: Unknown join pattern: \"${join}\". Expecting format \"joinTable ON joinTable.id = throughTable.foreignColumn\"`\n\t\t\t);\n\t\t}\n\t\tlet [_, joinTable, throughTable, foreignColumn] = matchJoinFirst || matchJoinSecond;\n\t\tthis._habtm.push({\n\t\t\tthisProperty,\n\t\t\tidsColumn,\n\t\t\tjoin,\n\t\t\tjoinTable,\n\t\t\tthroughTable,\n\t\t\tforeignColumn,\n\t\t});\n\t\treturn this;\n\t}\n\n\thasAndBelongsToMany(thisProperty, idsColumn, join) {\n\t\treturn this.habtm(thisProperty, idsColumn, join);\n\t}\n\n\t/**\n\t * Bind values by name to the query\n\t * @param {String} placeholder  The name of the placeholder\n\t * @param mixed $value  The value to bind\n\t * @example\n\t *     query.bind('postId', 123); // replace :postId with '123'\n\t * @return {Select}\n\t */\n\tbind(placeholder, value = null) {\n\t\tif (typeof placeholder === 'object' && value === null) {\n\t\t\tforOwn(placeholder, (val, field) => {\n\t\t\t\tthis._bound[field] = val;\n\t\t\t});\n\t\t\treturn this;\n\t\t}\n\t\tthis._bound[placeholder] = value;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind a previously bound property\n\t * @param {String} placeholder\n\t * @return {Select}\n\t */\n\tunbind(placeholder) {\n\t\tif (Array.isArray(placeholder)) {\n\t\t\tplaceholder.forEach(p => this.unbind(p));\n\t\t\treturn this;\n\t\t}\n\t\tthis._bound[placeholder] = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Fetch records and splice in related data\n\t * @return {Promise<Array>}\n\t */\n\tasync fetch(options = {}) {\n\t\toptions.sql = this.toString();\n\t\tconst records = await Db.factory().select(options, this._bound);\n\t\tawait this._spliceHasOnes(records);\n\t\tawait this._spliceBelongsTos(records);\n\t\tawait this._spliceHasManys(records);\n\t\tawait this._spliceHabtms(records);\n\t\treturn records;\n\t}\n\n\t/**\n\t * Fetch the first matched record\n\t * @return {Object|null}\n\t */\n\tasync fetchFirst() {\n\t\tthis.limit(1);\n\t\tconst records = await this.fetch();\n\t\treturn Array.isArray(records) && records.length ? records[0] : null;\n\t}\n\n\t/**\n\t * Fetch each record as an array of values or an array of key-value pairs\n\t * @return {Promise<Object>}\n\t */\n\tfetchHash() {\n\t\treturn Db.factory().selectHash(this.toString(), this._bound);\n\t}\n\n\t/**\n\t * Fetch the value of first column of the first record\n\t * @return {Promise}\n\t */\n\tfetchValue() {\n\t\treturn Db.factory().selectValue(this.toString(), this._bound);\n\t}\n\n\t/**\n\t * Fetch values and index by the given field name\n\t * @param {String} byField  The field by which to index (e.g. id)\n\t * @return {Promise<Object>}\n\t */\n\tasync fetchIndexed(byField) {\n\t\tconst rs = await this.fetch();\n\t\tif (!Array.isArray(rs)) {\n\t\t\treturn false;\n\t\t}\n\t\tconst indexed = {};\n\t\trs.forEach(r => (indexed[r[byField]] = r));\n\t\treturn indexed;\n\t}\n\n\t/**\n\t * Fetch values grouped by the given field name\n\t * @param {String} byField  The field by which to group\n\t * @example\n\t *      $query = QuickSelect::parse('SELECT * FROM comments');\n\t *      $byUser = query.fetchGrouped('user_id')\n\t *      // a key for each user id with an array of comments for each key\n\t * @return array|bool\n\t */\n\tasync fetchGrouped(byField) {\n\t\tconst rs = await this.fetch();\n\t\tif (!Array.isArray(rs)) {\n\t\t\treturn false;\n\t\t}\n\t\tconst grouped = {};\n\t\trs.forEach(r => {\n\t\t\tif (!grouped[r[byField]]) {\n\t\t\t\tgrouped[r[byField]] = [];\n\t\t\t}\n\t\t\tgrouped[r[byField]].push(r);\n\t\t});\n\t\treturn grouped;\n\t}\n\n\t/**\n\t * Clone this object\n\t * @return {QuickSelect}\n\t */\n\tgetClone() {\n\t\tconst copy = new Select();\n\t\tcopy._hasOne = cloneDeep(this._hasOne);\n\t\tcopy._belongsTo = cloneDeep(this._belongsTo);\n\t\tcopy._hasMany = cloneDeep(this._hasMany);\n\t\tcopy._habtm = cloneDeep(this._habtm);\n\t\tcopy._options = cloneDeep(this._options);\n\t\tcopy._columns = cloneDeep(this._columns);\n\t\tcopy._tables = cloneDeep(this._tables);\n\t\tcopy._joins = cloneDeep(this._joins);\n\t\tcopy._wheres = cloneDeep(this._wheres);\n\t\tcopy._havings = cloneDeep(this._havings);\n\t\tcopy._groupBys = cloneDeep(this._groupBys);\n\t\tcopy._orderBys = cloneDeep(this._orderBys);\n\t\tcopy._limit = this._limit;\n\t\tcopy._offset = this._offset;\n\t\tcopy._page = this._page;\n\t\tcopy._bound = cloneDeep(this._bound);\n\t\treturn copy;\n\t}\n\n\t/**\n\t * Build a version of this query that simply returns COUNT(*)\n\t * @param {String} [countExpr=\"*\"]  Use to specify `DISTINCT colname` if needed\n\t * @return {String}  The SQL query\n\t */\n\tgetFoundRowsQuery(countExpr = '*') {\n\t\tif (this._havings.length === 0) {\n\t\t\tconst query2 = this.getClone();\n\t\t\tquery2._columns = [`COUNT(${countExpr}) AS foundRows`];\n\t\t\tquery2._options = [];\n\t\t\tquery2._groupBys = [];\n\t\t\tquery2._orderBys = [];\n\t\t\tquery2._limit = null;\n\t\t\tquery2._offset = null;\n\t\t\tquery2._page = null;\n\t\t\treturn query2.toString();\n\t\t} else {\n\t\t\tconst subquery = this.getClone();\n\t\t\tsubquery._limit = null;\n\t\t\tsubquery._offset = null;\n\t\t\tsubquery._page = null;\n\t\t\tconst subquerySql = subquery.toString().replace(/\\n/g, '\\n\\t');\n\t\t\tconst sql = `SELECT COUNT(*) AS foundRows FROM (\\n\\t${subquerySql}\\n) AS subq`;\n\t\t\treturn sql;\n\t\t}\n\t}\n\n\t/**\n\t * Run a version of this query that simply returns COUNT(*)\n\t * @param {String} [countExpr=\"*\"]  Use to specify `DISTINCT colname` if needed\n\t * @return {Promise<Number>}  The number of rows or false on error\n\t */\n\tfoundRows(countExpr = '*') {\n\t\tconst sql = this.getFoundRowsQuery(countExpr);\n\t\treturn Db.factory().selectValue(sql, this._bound);\n\t}\n\n\t/**\n\t * Internal method to fetch hasOne dependent data and splice it into the given result set\n\t * @param {Array} records  Records from .fetch()\n\t */\n\tasync _spliceHasOnes(records) {\n\t\tif (this._hasOne.length === 0 || records.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tthis._hasOne.forEach(async spec => {\n\t\t\tconst match = spec.thisProperty.match(/^([\\w_]+) AS ([\\w_]+)$/i);\n\t\t\tlet thisProperty;\n\t\t\tif (match) {\n\t\t\t\tthisProperty = match[2];\n\t\t\t\tspec.thisColumn = match[1];\n\t\t\t} else {\n\t\t\t\tthisProperty = spec.thisProperty.replace(/_id$/, '');\n\t\t\t}\n\t\t\tconst [table, column] = spec.thatTableAndColumn.split('.');\n\t\t\tlet ids = [];\n\t\t\trecords.forEach(r => {\n\t\t\t\tif (r[spec.thisColumn]) {\n\t\t\t\t\tids.push(r[spec.thisColumn]);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (ids.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tids = uniq(ids);\n\t\t\tconst query = Select.init()\n\t\t\t\t.table(table)\n\t\t\t\t.where(column, 'IN', ids);\n\t\t\tconst indexed = await query.fetchIndexed(column);\n\t\t\trecords.forEach(r => {\n\t\t\t\tr[thisProperty] = indexed[r[spec.thisColumn]] || null;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Internal method to fetch belongTo dependent data and splice it into the given result set\n\t * @param {Array} records  The records from fetch()\n\t */\n\tasync _spliceBelongsTos(records) {\n\t\tif (this._belongsTo.length === 0 || records.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst ids = uniq(records.map(r => r.id));\n\t\tthis._belongsTo.forEach(async spec => {\n\t\t\tconst [table, column] = spec.thatTableAndColumn.split('.');\n\t\t\tconst indexed = await Select.init()\n\t\t\t\t.table(table)\n\t\t\t\t.where(column, 'IN', ids)\n\t\t\t\t.fetchIndexed(column);\n\t\t\trecords.forEach(r => {\n\t\t\t\tr[spec.thisPropery] = indexed[r.id] || null;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Internal method to fetch hasMany dependent data and splice it into the given result set\n\t * @param {Array} records  The records from fetch()\n\t */\n\tasync _spliceHasManys(records) {\n\t\tif (this._hasMany.length === 0 || records.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst ids = uniq(records.map(r => r.id));\n\t\tthis._hasMany.forEach(async spec => {\n\t\t\tconst [table, column] = spec.thatTableAndColumn.split('.');\n\t\t\tconst query = Select.init()\n\t\t\t\t.table(table)\n\t\t\t\t.where(column, 'IN', ids);\n\t\t\tconst grouped = await query.fetchGrouped(column);\n\t\t\trecords.forEach(r => {\n\t\t\t\tr[spec.thisPropery] = grouped[r.id] || [];\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Internal method to fetch habtm dependent data and splice it into the given result set\n\t * @param {Array} records  The records from fetch()\n\t * @example\n\t * const query = Select.parse('SELECT * FROM users');\n\t * query.habtm(\n\t *   'hubs',\n\t *   'SELECT user_id, client_id FROM clients_users WHERE user_id IN (?)',\n\t *   'SELECT * FROM clients WHERE id IN(?)'\n\t * );\n\t */\n\tasync _spliceHabtms(records) {\n\t\tif (this._habtm.length === 0 || records.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst ids = uniq(records.map(r => r.id));\n\t\tthis._habtm.forEach(async spec => {\n\t\t\t// const { joinTableQuery, foreignTable } = spec;\n\t\t\t// const joinTableLookup = await Db.factory().selectGrouped('user_id', joinTableQuery, ids);\n\t\t\t// const foreignIds = uniq(values(joinTableLookup));\n\t\t\t// const foreignQuery = Select.init()\n\t\t\t// \t.table(foreignTable)\n\t\t\t// \t.where('id', 'IN', foreignIds);\n\t\t\t// const foreignRecords = await foreignQuery.fetchIndexed('id');\n\t\t\t// const { thisProperty, idsColumn, join, throughTable, subqueryHandler } = spec;\n\t\t\t// const subquery = Select.init()\n\t\t\t// \t.table(throughTable)\n\t\t\t// \t.leftJoin(join)\n\t\t\t// \t.where(`${throughTable}.${idsColumn}`, 'IN', ids);\n\t\t\t// if (subqueryHandler) {\n\t\t\t// \tsubqueryHandler(subquery);\n\t\t\t// }\n\t\t\t// const grouped = await subquery.fetchIndexed(idsColumn);\n\t\t\t// records.forEach(r => {\n\t\t\t// \tr[thisProperty] = grouped[r.id] || [];\n\t\t\t// });\n\t\t});\n\t}\n\n\t/**\n\t * Add an array of column names to fetch\n\t * @param {String[]} columnNames  The names of columns\n\t * @return {Select}\n\t */\n\tcolumns(columnNames) {\n\t\tthis._columns = [...this._columns, ...columnNames];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a column name to fetch\n\t * @param {String} columnName  The name of the column\n\t * @return {Select}\n\t */\n\tcolumn(columnName) {\n\t\tthis._columns.push(columnName);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an option expression such as \"TOP 10\" or \"SQL_CALC_FOUND_ROWS\"\n\t * @param {String} optionExpression  Expression to go after \"SELECT\" and before column list\n\t * @return {Select}\n\t */\n\toption(optionExpression) {\n\t\tthis._options.push(optionExpression);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a table to the \"FROM\" clause (same as .from())\n\t * @param {String} tableName  The name of the table to query\n\t * @return {Select}\n\t */\n\ttable(tableName) {\n\t\tthis._tables.push(tableName);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a table to the \"FROM\" clause (same as .table())\n\t * @param {String} tableName  The name of the table to query\n\t * @return {Select}\n\t */\n\tfrom(tableName) {\n\t\tthis._tables.push(tableName);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an INNER JOIN expression (same as ->innerJoin())\n\t * @param {String} expression  The expression following the INNER JOIN keyword\n\t * @example query.join('posts p ON p.id = c.post_id');\n\t * @return {Select}\n\t */\n\tjoin(expression) {\n\t\tthis._joins.push(`INNER JOIN ${expression}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a LEFT JOIN expression\n\t * @param {String} expression  The expression following the LEFT JOIN keyword\n\t * @example query.leftJoin('posts p ON p.id = c.post_id');\n\t * @return {Select}\n\t */\n\tleftJoin(expression) {\n\t\tthis._joins.push(`LEFT JOIN ${expression}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a FULL JOIN expression\n\t * @param {String} expression  The expression following the FULL JOIN keyword\n\t * @example query.fullJoin('posts p ON p.id = c.post_id');\n\t * @return {Select}\n\t */\n\tfullJoin(expression) {\n\t\tthis._joins.push(`FULL JOIN ${expression}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a RIGHT JOIN expression\n\t * @param {String} expression  The expression following the RIGHT JOIN keyword\n\t * @example query.rightJoin('posts p ON p.id = c.post_id');\n\t * @return {Select}\n\t */\n\trightJoin(expression) {\n\t\tthis._joins.push(`RIGHT JOIN ${expression}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a CROSS JOIN expression\n\t * @param {String} expression  The expression following the CROSS JOIN keyword\n\t * @example query.join('posts p ON p.id = c.post_id');\n\t * @return {Select}\n\t */\n\tcrossJoin(expression) {\n\t\tthis._joins.push(`CROSS JOIN ${expression}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an INNER JOIN expression (same as ->join())\n\t * @param {String} expression  The expression following the INNER JOIN keyword\n\t * @example query.innerJoin('posts p ON p.id = c.post_id');\n\t * @return {Select}\n\t */\n\tinnerJoin(expression) {\n\t\tthis._joins.push(`INNER JOIN ${expression}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a LEFT OUTER JOIN expression\n\t * @param {String} expression  The expression following the LEFT OUTER JOIN keyword\n\t * @example query.leftOuterJoin('posts p ON p.id = c.post_id');\n\t * @return {Select}\n\t */\n\tleftOuterJoin(expression) {\n\t\tthis._joins.push(`LEFT OUTER JOIN ${expression}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a FULL OUTER JOIN expression\n\t * @param {String} expression  The expression following the FULL OUTER JOIN keyword\n\t * @example query.fullOuterJoin('posts p ON p.id = c.post_id');\n\t * @return {Select}\n\t */\n\tfullOuterJoin(expression) {\n\t\tthis._joins.push(`FULL OUTER JOIN ${expression}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a RIGHT OUTER JOIN expression\n\t * @param {String} expression  The expression following the RIGHT OUTER JOIN keyword\n\t * @example query.rightOuterJoin('posts p ON p.id = c.post_id');\n\t * @return {Select}\n\t */\n\trightOuterJoin(expression) {\n\t\tthis._joins.push(`RIGHT OUTER JOIN ${expression}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove a join condition with the specified table\n\t * @param {String|String[]} table  The name of the table or tables in the first part of the join statement\n\t * @return {Select}\n\t */\n\tunjoin(table) {\n\t\tif (Array.isArray(table)) {\n\t\t\ttable.forEach(t => this.unjoin(t));\n\t\t\treturn this;\n\t\t}\n\t\ttable = escapeRegExp(table);\n\t\tthis._joins = this._joins.filter(join => {\n\t\t\tconst regex = new RegExp(`^([A-Z]+) JOIN ${table}\\\\b`);\n\t\t\treturn !regex.test(join);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Utility function to add conditions for a clause (WHERE, HAVING)\n\t * @param {String} collection  The collection to add the clauses to\n\t * @param {Array} criteria  A list of expressions to stringify\n\t * @property {*} criteria[0]  The expression or name of the column on which to match\n\t * @property {*} [criteria[1]]  The comparison operator; defaults to \"=\"\n\t * @property {*} [criteria[2]]  The value to test against\n\t * @example  The following are equivalent\n\t *     this._conditions(this._wheres, ['deleted_at IS NULL']);\n\t *     this._conditions(this._wheres, ['deleted_at', null]);\n\t *     this._conditions(this._wheres, ['deleted_at', '=', null]);\n\t * @example  More examples\n\t *     this._conditions(this._wheres, ['fname', 'LIKE', 'joe']); // fname LIKE 'joe'\n\t *     this._conditions(this._wheres, ['fname', 'LIKE ?', 'joe']); // fname LIKE 'joe'\n\t *     this._conditions(this._wheres, ['fname LIKE %?%', 'joe']); // fname LIKE '%joe%'\n\t *     this._conditions(this._wheres, ['fname LIKE ?%', 'joe']); // fname LIKE 'joe%'\n\t *     this._conditions(this._wheres, ['fname', 'LIKE ?%', 'joe']); // fname LIKE 'joe%'\n\t *     this._conditions(this._wheres, ['price >', 10]); // price > '10'\n\t *     this._conditions(this._wheres, ['price', '>', 10]); // price > '10'\n\t *     this._conditions(this._wheres, ['price =', 10]); // price = '10'\n\t *     this._conditions(this._wheres, ['price !=', 10]); // price != '10'\n\t *     this._conditions(this._wheres, ['price', 10]); // price = '10'\n\t *     this._conditions(this._wheres, ['price', '=', 10]); // price = '10'\n\t *     this._conditions(this._wheres, ['price', '!=', 10]); // price != '10'\n\t *     this._conditions(this._wheres, ['price', 'BETWEEN', [10,20]]); // price BETWEEN '10' AND '20'\n\t *     this._conditions(this._wheres, ['price', 'NOT BETWEEN', [10,20]]); // price NOT BETWEEN '10' AND '20'\n\t *     this._conditions(this._wheres, ['price', [10,20]]); // price IN('10','20')\n\t *     this._conditions(this._wheres, ['price', '=', [10,20]]); // price IN('10','20')\n\t *     this._conditions(this._wheres, ['price', 'IN', [10,20]]); // price IN('10','20')\n\t *     this._conditions(this._wheres, ['price', 'NOT IN', [10,20]]); // price NOT IN('10','20')\n\t * @return {Select}\n\t */\n\t_conditions(collection, criteria) {\n\t\tif (typeof criteria === 'string') {\n\t\t\tcollection.push(criteria);\n\t\t\treturn this;\n\t\t}\n\t\tconst numArgs = criteria.length;\n\t\tlet [column, operator, value] = criteria;\n\t\tif (Array.isArray(column)) {\n\t\t\tcolumn.forEach(val => {\n\t\t\t\tthis._conditions(collection, [val]);\n\t\t\t});\n\t\t\treturn this;\n\t\t} else if (typeof column === 'object') {\n\t\t\tforOwn(column, (val, name) => {\n\t\t\t\tthis._conditions(collection, [name, val]);\n\t\t\t});\n\t\t\treturn this;\n\t\t}\n\t\tif (/^\\w+$/.test(column)) {\n\t\t\tcolumn = mysql.escapeId(column);\n\t\t}\n\t\tif (numArgs === 1) {\n\t\t\t// condition is a stand-alone expression\n\t\t\t// e.g. \"SUM(price) > 10\"\n\t\t\tcollection.push(column);\n\t\t\treturn this;\n\t\t} else if (\n\t\t\tnumArgs === 2 &&\n\t\t\tArray.isArray(operator) &&\n\t\t\toperator.length > 0 &&\n\t\t\tsubstrCount(column, '?') === operator.length\n\t\t) {\n\t\t\tconst values = operator;\n\t\t\tlet i = 0;\n\t\t\tconst sql = column.replace(/(%)?\\?(%)?/, ($0, $1, $2) => {\n\t\t\t\tconst escNoQuotes = this.escapeQuoteless(values[i++]);\n\t\t\t\treturn `'${$1}${escNoQuotes}${$2}'`;\n\t\t\t});\n\t\t\tcollection.push(sql);\n\t\t\treturn this;\n\t\t} else if (numArgs === 2) {\n\t\t\t// condition has pairs of \"column + operator\" => \"value\"\n\t\t\t// e.g. [\"price >\", 10]\n\t\t\t// e.g. [\"status LIKE ?%\", 10]\n\t\t\tvalue = operator;\n\t\t\tconst parts = column.split(' ');\n\t\t\tcolumn = parts.shift();\n\t\t\toperator = parts.join(' ');\n\t\t}\n\t\tif (!operator) {\n\t\t\toperator = '=';\n\t\t}\n\t\toperator = operator.toLocaleUpperCase();\n\t\tconst likeMatch = operator.match(/^(LIKE|NOT LIKE)(?: (\\?|\\?%|%\\?|%\\?%))?$/);\n\t\tif (operator === 'NOT BETWEEN' || operator === 'BETWEEN') {\n\t\t\t// expect a two-item array\n\t\t\tconst from = mysql.escape(value[0]);\n\t\t\tconst to = mysql.escape(value[1]);\n\t\t\tcollection.push(`${column} ${operator} ${from} AND ${to}`);\n\t\t} else if (likeMatch) {\n\t\t\tconst quoteless = this.escapeQuoteless(value);\n\t\t\tlet quoted;\n\t\t\tif (likeMatch[2] === '?' || !likeMatch[2]) {\n\t\t\t\tquoted = `'${quoteless}'`;\n\t\t\t} else if (likeMatch[2] === '?%') {\n\t\t\t\tquoted = `'${quoteless}%'`;\n\t\t\t} else if (likeMatch[2] === '%?') {\n\t\t\t\tquoted = `'%${quoteless}'`;\n\t\t\t} else if (likeMatch[2] === '%?%') {\n\t\t\t\tquoted = `'%${quoteless}%'`;\n\t\t\t}\n\t\t\tcollection.push(`${column} ${likeMatch[1]} ${quoted}`);\n\t\t} else if (value === null) {\n\t\t\tcollection.push(operator === '=' ? `${column} IS NULL` : `${column} IS NOT NULL`);\n\t\t} else if (Array.isArray(value)) {\n\t\t\t// an array of values should be IN or NOT IN\n\t\t\tconst inVals = value.map(v => mysql.escape(v));\n\t\t\tconst joined = inVals.join(',');\n\t\t\tcollection.push(\n\t\t\t\toperator === '=' || operator === 'IN'\n\t\t\t\t\t? `${column} IN(${joined})`\n\t\t\t\t\t: `${column} NOT IN(${joined})`\n\t\t\t);\n\t\t} else if (operator === 'IN' || operator === 'NOT IN') {\n\t\t\t// in clause that is not array\n\t\t\tvalue = mysql.escape(value);\n\t\t\tcollection.push(`${column} ${operator} (${value})`);\n\t\t} else {\n\t\t\tvalue = mysql.escape(value);\n\t\t\tcollection.push(`${column} ${operator} ${value}`);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a group by column or expression\n\t * @param {String} column  The name of a column (or expression) to group by\n\t * @return {Select}\n\t */\n\tgroupBy(column) {\n\t\tthis._groupBys.push(column);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add WHERE clauses to conditions (See _conditions for usage)\n\t * @param {String} column  The expression or name of the column on which to match\n\t * @param {*} [operator]  The comparison operator; defaults to \"=\"\n\t * @param {*} [value]  The value to test against\n\t * @return {Select}\n\t */\n\twhere(...args) {\n\t\tthis._conditions(this._wheres, args);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a WHERE clause with a BETWEEN condition\n\t * @param {String} column  The column name\n\t * @param {Array} twoValueArray  The two values to be between\n\t * @return {Select}\n\t */\n\twhereBetween(column, twoValueArray) {\n\t\tif (twoValueArray[0] && twoValueArray[1]) {\n\t\t\tthis.where(column, 'BETWEEN', twoValueArray);\n\t\t} else if (twoValueArray[0]) {\n\t\t\tthis.where(column, '>=', twoValueArray[0]);\n\t\t} else if (twoValueArray.length > 1) {\n\t\t\tthis.where(column, '<=', twoValueArray[1]);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add WHERE conditions to place inside an OR block (See _conditions for usage)\n\t * @param {Array} conditions  A list where each item is an array with parameters that would be taken by where()\n\t * @return {Select}\n\t */\n\torWhere(conditions) {\n\t\tconst criteria = [];\n\t\tconditions.forEach(condition => {\n\t\t\tthis._conditions(criteria, condition);\n\t\t});\n\t\tconst joined = criteria.join(' OR ');\n\t\tif (joined.slice(0, 1) === '(' && joined.slice(-1) === ')') {\n\t\t\tthis.where(joined);\n\t\t} else {\n\t\t\tthis.where(`(${joined})`);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a HAVING condition (See _conditions for usage)\n\t * @param {String} column  The expression or name of the column on which to match\n\t * @param {*} [operator]  The comparison operator; defaults to \"=\"\n\t * @param {*} [value]  The value to test against\n\t * @return {Select}\n\t */\n\thaving(...args) {\n\t\tthis._conditions(this._havings, args);\n\t\treturn this;\n\t}\n\torHaving(conditions) {\n\t\tconst criteria = [];\n\t\tconditions.forEach(condition => {\n\t\t\tthis._conditions(criteria, condition);\n\t\t});\n\t\tconst joined = criteria.join(' OR ');\n\t\tthis.having(`(${joined})`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a column or expression to order by\n\t * @param {String} column  The column name or expression to sort by. Include DESC or prefix with - to sort descending\n\t * @return {Select}\n\t */\n\torderBy(column) {\n\t\tthis._orderBys.push(column.replace(/^-(.+)/, '$1 DESC'));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sort by the given column, with a map of columns to translate\n\t * @param {String} column  The column name such as \"created_at\" or \"-created_at\" for descending\n\t * @param {Object} [mapNames={}]  Column names to translate from one name to another\n\t * @example\n\t *     query.sortField('-modified_at'); // ORDER BY modified_at DESC\n\t *     query.sortField('created_at', ['created_at'=>'created']); // ORDER BY created\n\t * @return {Select}\n\t */\n\tsortField(column, mapNames = {}) {\n\t\tconst direction = column.slice(0, 1) === '-' ? 'DESC' : 'ASC';\n\t\tcolumn = column.replace(/^-/, '');\n\t\tcolumn = mapNames[column] || column;\n\t\tthis.orderBy(`${column} ${direction}`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Limit results to the given number\n\t * @param {Number} num  The number to limit by\n\t * @return {Select}\n\t */\n\tlimit(num) {\n\t\tthis._limit = Number(num) || 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Fetch results from the given offset\n\t * @param {Number} num  The offset\n\t * @return {Select}\n\t */\n\toffset(num) {\n\t\tthis._offset = Number(num) || 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the offset based on the limit with the given number of pages\n\t * @param {Number} num  The page number\n\t * @return {Select}\n\t */\n\tpage(num) {\n\t\tthis._page = Number(num) || 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Manually escape a value\n\t * @param {*} value  The value to escape\n\t * @return {string}\n\t */\n\tescape(value) {\n\t\treturn mysql.escape(value);\n\t}\n\n\t/**\n\t * Manually escape a value without quotes\n\t * @param {*} value  The value to escape without quotes\n\t * @return {string}\n\t */\n\tescapeQuoteless(value) {\n\t\tconst escaped = mysql.escape(value);\n\t\tif (escaped.slice(0, 1) === \"'\" && escaped.slice(-1) === \"'\") {\n\t\t\treturn escaped.slice(1, -1);\n\t\t}\n\t\treturn value;\n\t}\n}\n","import { Db } from './Db/Db.js';\nimport { Parser } from './Parser/Parser.js';\nimport { Select } from './Select/Select.js';\nexport { Db, Parser, Select };\n"]}